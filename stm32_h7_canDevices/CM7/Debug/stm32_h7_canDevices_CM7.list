
stm32_h7_canDevices_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009628  08009628  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009630  08009630  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08009638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  24000078  080096b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002bc  080096b0  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d4d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d1  00000000  00000000  00037df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc7d  00000000  00000000  0003c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c5  00000000  00000000  0007930d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197cc6  00000000  00000000  0008e5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00226298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005224  00000000  00000000  002262e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800946c 	.word	0x0800946c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800946c 	.word	0x0800946c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b9c      	ldr	r3, [pc, #624]	; (8000a30 <main+0x280>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	627a      	str	r2, [r7, #36]	; 0x24
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fbd3 	bl	8000f84 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fe4b 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f949 	bl	8000a78 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b92      	ldr	r3, [pc, #584]	; (8000a30 <main+0x280>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a90      	ldr	r2, [pc, #576]	; (8000a30 <main+0x280>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b8e      	ldr	r3, [pc, #568]	; (8000a30 <main+0x280>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f003 fabb 	bl	8003d80 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f003 fad1 	bl	8003db4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b85      	ldr	r3, [pc, #532]	; (8000a30 <main+0x280>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	627a      	str	r2, [r7, #36]	; 0x24
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fba5 	bl	8000f84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fafd 	bl	8000e38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 faaf 	bl	8000da0 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000842:	f000 f9ff 	bl	8000c44 <MX_FDCAN1_Init>
  MX_ADC3_Init();
 8000846:	f000 f99b 	bl	8000b80 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  uint16_t raw;
  uint16_t psi;
  uint8_t selectedPSI;
  uint8_t recData[10];
  uint32_t CH1_DC = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(Compresor_GPIO_Port, Compresor_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2120      	movs	r1, #32
 8000852:	4878      	ldr	r0, [pc, #480]	; (8000a34 <main+0x284>)
 8000854:	f003 fa60 	bl	8003d18 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
	  //printf("Safe\n\r");
	  if(HAL_UART_Receive(&huart3, (uint8_t)recData[0], sizeof(recData[0]), 100) == HAL_OK){
 8000858:	793b      	ldrb	r3, [r7, #4]
 800085a:	4619      	mov	r1, r3
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4875      	ldr	r0, [pc, #468]	; (8000a38 <main+0x288>)
 8000862:	f006 fd41 	bl	80072e8 <HAL_UART_Receive>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d104      	bne.n	8000876 <main+0xc6>
		  printf("Valor del UART: %x", recData[0]);
 800086c:	793b      	ldrb	r3, [r7, #4]
 800086e:	4619      	mov	r1, r3
 8000870:	4872      	ldr	r0, [pc, #456]	; (8000a3c <main+0x28c>)
 8000872:	f007 fe6d 	bl	8008550 <iprintf>
	  }
	  	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000876:	4b72      	ldr	r3, [pc, #456]	; (8000a40 <main+0x290>)
 8000878:	4a72      	ldr	r2, [pc, #456]	; (8000a44 <main+0x294>)
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	4872      	ldr	r0, [pc, #456]	; (8000a48 <main+0x298>)
 800087e:	f002 fcaf 	bl	80031e0 <HAL_FDCAN_GetRxMessage>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d126      	bne.n	80008d6 <main+0x126>
	  	  		HAL_Delay(10);
 8000888:	200a      	movs	r0, #10
 800088a:	f000 fe87 	bl	800159c <HAL_Delay>
	  	  		printf("\n\rCAN ID: %lx", RxHeader.Identifier);
 800088e:	4b6d      	ldr	r3, [pc, #436]	; (8000a44 <main+0x294>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	486d      	ldr	r0, [pc, #436]	; (8000a4c <main+0x29c>)
 8000896:	f007 fe5b 	bl	8008550 <iprintf>
	  	  		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800089a:	2101      	movs	r1, #1
 800089c:	486c      	ldr	r0, [pc, #432]	; (8000a50 <main+0x2a0>)
 800089e:	f003 fa54 	bl	8003d4a <HAL_GPIO_TogglePin>
	  	  		int dataSize = RxHeader.DataLength >>  16;
 80008a2:	4b68      	ldr	r3, [pc, #416]	; (8000a44 <main+0x294>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	0c1b      	lsrs	r3, r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
	  	  		printf(" [%x]", dataSize);
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	4869      	ldr	r0, [pc, #420]	; (8000a54 <main+0x2a4>)
 80008ae:	f007 fe4f 	bl	8008550 <iprintf>
	  	  		for (int i = 0; i < dataSize; i ++){
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e00a      	b.n	80008ce <main+0x11e>
	  	  					printf(" %x", RxData[i]);
 80008b8:	4a61      	ldr	r2, [pc, #388]	; (8000a40 <main+0x290>)
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4865      	ldr	r0, [pc, #404]	; (8000a58 <main+0x2a8>)
 80008c4:	f007 fe44 	bl	8008550 <iprintf>
	  	  		for (int i = 0; i < dataSize; i ++){
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	3301      	adds	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbf0      	blt.n	80008b8 <main+0x108>
	  	  				}
	  	  		}


	  	  	  RxData[0] = 0x3A;
 80008d6:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <main+0x290>)
 80008d8:	223a      	movs	r2, #58	; 0x3a
 80008da:	701a      	strb	r2, [r3, #0]

	  	  	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008dc:	2101      	movs	r1, #1
 80008de:	485c      	ldr	r0, [pc, #368]	; (8000a50 <main+0x2a0>)
 80008e0:	f003 fa33 	bl	8003d4a <HAL_GPIO_TogglePin>
	  	  	  //HAL_Delay(100);


	  	  	  //HAL_UART_Transmit(&huart3,word, sizeof(word), 1000);
	  	  	  HAL_ADC_Start(&hadc3);
 80008e4:	485d      	ldr	r0, [pc, #372]	; (8000a5c <main+0x2ac>)
 80008e6:	f001 fa0d 	bl	8001d04 <HAL_ADC_Start>
	  	  	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80008ea:	f04f 31ff 	mov.w	r1, #4294967295
 80008ee:	485b      	ldr	r0, [pc, #364]	; (8000a5c <main+0x2ac>)
 80008f0:	f001 fad2 	bl	8001e98 <HAL_ADC_PollForConversion>
	  	  	  raw = HAL_ADC_GetValue(&hadc3);
 80008f4:	4859      	ldr	r0, [pc, #356]	; (8000a5c <main+0x2ac>)
 80008f6:	f001 fbc3 	bl	8002080 <HAL_ADC_GetValue>
 80008fa:	4603      	mov	r3, r0
 80008fc:	827b      	strh	r3, [r7, #18]

	  	  	  psi = raw/436.9;
 80008fe:	8a7b      	ldrh	r3, [r7, #18]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000908:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8000a28 <main+0x278>
 800090c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000910:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000914:	ee17 3a90 	vmov	r3, s15
 8000918:	823b      	strh	r3, [r7, #16]

	  	  	  printf("Valor del Sensor: %d PSI\r\n", psi);
 800091a:	8a3b      	ldrh	r3, [r7, #16]
 800091c:	4619      	mov	r1, r3
 800091e:	4850      	ldr	r0, [pc, #320]	; (8000a60 <main+0x2b0>)
 8000920:	f007 fe16 	bl	8008550 <iprintf>

	  	  	  if(RxData[0] == pressureSetpoints[0]){
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <main+0x290>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b4e      	ldr	r3, [pc, #312]	; (8000a64 <main+0x2b4>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d104      	bne.n	800093a <main+0x18a>
	  	  		  selectedPSI = RxData[0];
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <main+0x290>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000938:	e01f      	b.n	800097a <main+0x1ca>
	  	  	  }else if(RxData[0] == pressureSetpoints[1]){
 800093a:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <main+0x290>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <main+0x2b4>)
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	429a      	cmp	r2, r3
 8000944:	d104      	bne.n	8000950 <main+0x1a0>
	  	  		  selectedPSI = RxData[0];
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <main+0x290>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800094e:	e014      	b.n	800097a <main+0x1ca>
	  	  	  }else if(RxData[0] == pressureSetpoints[2]){
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <main+0x290>)
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <main+0x2b4>)
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	429a      	cmp	r2, r3
 800095a:	d104      	bne.n	8000966 <main+0x1b6>
	  	  		  selectedPSI = RxData[0];
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <main+0x290>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000964:	e009      	b.n	800097a <main+0x1ca>
	  	  	  }else if(RxData[30] == pressureSetpoints[3]){
 8000966:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <main+0x290>)
 8000968:	7f9a      	ldrb	r2, [r3, #30]
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <main+0x2b4>)
 800096c:	78db      	ldrb	r3, [r3, #3]
 800096e:	429a      	cmp	r2, r3
 8000970:	d103      	bne.n	800097a <main+0x1ca>
	  	  		  selectedPSI = RxData[0];
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <main+0x290>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  	  	  }

	  	  	  selectedPSI = (int)selectedPSI - 40;
 800097a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800097e:	3b28      	subs	r3, #40	; 0x28
 8000980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  	  	  printf("Selected PSI: %d\r\n", selectedPSI);
 8000984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000988:	4619      	mov	r1, r3
 800098a:	4837      	ldr	r0, [pc, #220]	; (8000a68 <main+0x2b8>)
 800098c:	f007 fde0 	bl	8008550 <iprintf>
			  if(psi < selectedPSI){
 8000990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000994:	b29b      	uxth	r3, r3
 8000996:	8a3a      	ldrh	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d20a      	bcs.n	80009b2 <main+0x202>
				HAL_GPIO_WritePin(Compresor_GPIO_Port, Compresor_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2120      	movs	r1, #32
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <main+0x284>)
 80009a2:	f003 f9b9 	bl	8003d18 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Valvula_GPIO_Port, Valvula_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4822      	ldr	r0, [pc, #136]	; (8000a34 <main+0x284>)
 80009ac:	f003 f9b4 	bl	8003d18 <HAL_GPIO_WritePin>
 80009b0:	e01a      	b.n	80009e8 <main+0x238>
			  }else if(psi > selectedPSI){
 80009b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	8a3a      	ldrh	r2, [r7, #16]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d90a      	bls.n	80009d4 <main+0x224>
				HAL_GPIO_WritePin(Compresor_GPIO_Port, Compresor_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	481c      	ldr	r0, [pc, #112]	; (8000a34 <main+0x284>)
 80009c4:	f003 f9a8 	bl	8003d18 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Valvula_GPIO_Port, Valvula_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4819      	ldr	r0, [pc, #100]	; (8000a34 <main+0x284>)
 80009ce:	f003 f9a3 	bl	8003d18 <HAL_GPIO_WritePin>
 80009d2:	e009      	b.n	80009e8 <main+0x238>
			  }else{
				HAL_GPIO_WritePin(Compresor_GPIO_Port, Compresor_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2120      	movs	r1, #32
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <main+0x284>)
 80009da:	f003 f99d 	bl	8003d18 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Valvula_GPIO_Port, Valvula_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <main+0x284>)
 80009e4:	f003 f998 	bl	8003d18 <HAL_GPIO_WritePin>
			  }

			  tireReadings[0] = psi * 10;
 80009e8:	8a3b      	ldrh	r3, [r7, #16]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <main+0x2bc>)
 80009f8:	701a      	strb	r2, [r3, #0]
			  printf("Value sent to CAN: %x\r\n", tireReadings[0]);
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <main+0x2bc>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	481b      	ldr	r0, [pc, #108]	; (8000a70 <main+0x2c0>)
 8000a02:	f007 fda5 	bl	8008550 <iprintf>

			  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, tireReadings) != HAL_OK ){
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <main+0x2bc>)
 8000a08:	491a      	ldr	r1, [pc, #104]	; (8000a74 <main+0x2c4>)
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <main+0x298>)
 8000a0c:	f002 fb8d 	bl	800312a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <main+0x26a>
						Error_Handler();
 8000a16:	f000 fab5 	bl	8000f84 <Error_Handler>
				}
				HAL_Delay(200);
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f000 fdbe 	bl	800159c <HAL_Delay>
	  if(HAL_UART_Receive(&huart3, (uint8_t)recData[0], sizeof(recData[0]), 100) == HAL_OK){
 8000a20:	e71a      	b.n	8000858 <main+0xa8>
 8000a22:	bf00      	nop
 8000a24:	f3af 8000 	nop.w
 8000a28:	66666666 	.word	0x66666666
 8000a2c:	407b4e66 	.word	0x407b4e66
 8000a30:	58024400 	.word	0x58024400
 8000a34:	58020000 	.word	0x58020000
 8000a38:	24000198 	.word	0x24000198
 8000a3c:	08009484 	.word	0x08009484
 8000a40:	24000294 	.word	0x24000294
 8000a44:	2400026c 	.word	0x2400026c
 8000a48:	240000f8 	.word	0x240000f8
 8000a4c:	08009498 	.word	0x08009498
 8000a50:	58020400 	.word	0x58020400
 8000a54:	080094a8 	.word	0x080094a8
 8000a58:	080094b0 	.word	0x080094b0
 8000a5c:	24000094 	.word	0x24000094
 8000a60:	080094b4 	.word	0x080094b4
 8000a64:	24000008 	.word	0x24000008
 8000a68:	080094d0 	.word	0x080094d0
 8000a6c:	2400029c 	.word	0x2400029c
 8000a70:	080094e4 	.word	0x080094e4
 8000a74:	24000248 	.word	0x24000248

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09c      	sub	sp, #112	; 0x70
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	224c      	movs	r2, #76	; 0x4c
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 fd5a 	bl	8008540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2220      	movs	r2, #32
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fd54 	bl	8008540 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a98:	2004      	movs	r0, #4
 8000a9a:	f003 f99f 	bl	8003ddc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <SystemClock_Config+0xfc>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <SystemClock_Config+0xfc>)
 8000aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <SystemClock_Config+0xfc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <SystemClock_Config+0x100>)
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	4a2e      	ldr	r2, [pc, #184]	; (8000b78 <SystemClock_Config+0x100>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <SystemClock_Config+0x100>)
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad0:	bf00      	nop
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xfc>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ade:	d1f8      	bne.n	8000ad2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemClock_Config+0x104>)
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <SystemClock_Config+0x104>)
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b04:	233c      	movs	r3, #60	; 0x3c
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000b0c:	2318      	movs	r3, #24
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 f9b3 	bl	8003e90 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b30:	f000 fa28 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	233f      	movs	r3, #63	; 0x3f
 8000b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b40:	2308      	movs	r3, #8
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fdc6 	bl	80046ec <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b66:	f000 fa0d 	bl	8000f84 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3770      	adds	r7, #112	; 0x70
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	58024800 	.word	0x58024800
 8000b78:	58000400 	.word	0x58000400
 8000b7c:	58024400 	.word	0x58024400

08000b80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <MX_ADC3_Init+0xbc>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000bf0:	f000 fee6 	bl	80019c0 <HAL_ADC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000bfa:	f000 f9c3 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_ADC3_Init+0xc0>)
 8000c00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c02:	2306      	movs	r3, #6
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c10:	2304      	movs	r3, #4
 8000c12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_ADC3_Init+0xb8>)
 8000c22:	f001 fa3b 	bl	800209c <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c2c:	f000 f9aa 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24000094 	.word	0x24000094
 8000c3c:	58026000 	.word	0x58026000
 8000c40:	0c900008 	.word	0x0c900008

08000c44 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c48:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c4a:	4a51      	ldr	r2, [pc, #324]	; (8000d90 <MX_FDCAN1_Init+0x14c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c4e:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c54:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c60:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000c6c:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c74:	2208      	movs	r2, #8
 8000c76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000c78:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c7a:	223f      	movs	r2, #63	; 0x3f
 8000c7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000c7e:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c84:	4b41      	ldr	r3, [pc, #260]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c90:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c9c:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ca8:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cb4:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cf0:	4826      	ldr	r0, [pc, #152]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000cf2:	f001 ff9b 	bl	8002c2c <HAL_FDCAN_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000cfc:	f000 f942 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /* Configure Rx filter */
       sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
       sFilterConfig.FilterIndex = 0;
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
       sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	609a      	str	r2, [r3, #8]
       sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
       sFilterConfig.FilterID1 = 0x611;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d1a:	f240 6211 	movw	r2, #1553	; 0x611
 8000d1e:	611a      	str	r2, [r3, #16]
       sFilterConfig.FilterID2 = 0x7FF;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d26:	615a      	str	r2, [r3, #20]

       //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

       if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000d28:	491a      	ldr	r1, [pc, #104]	; (8000d94 <MX_FDCAN1_Init+0x150>)
 8000d2a:	4818      	ldr	r0, [pc, #96]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000d2c:	f002 f95c 	bl	8002fe8 <HAL_FDCAN_ConfigFilter>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_FDCAN1_Init+0xf6>
         {
            /* Filter configuration Error */
            Error_Handler();
 8000d36:	f000 f925 	bl	8000f84 <Error_Handler>
         }
        /* Start the FDCAN module */
       if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000d3c:	f002 f9ca 	bl	80030d4 <HAL_FDCAN_Start>
           	 }
               /* Start Error */

       if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_FDCAN1_Init+0x148>)
 8000d46:	f002 fbb9 	bl	80034bc <HAL_FDCAN_ActivateNotification>
              }

            /* Notification Error */

        /* Configure Tx buffer message */
       TxHeader.Identifier = 0x018FEEEA3; //Aqui va el identificador de 29 bits
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_FDCAN1_Init+0x158>)
 8000d4e:	601a      	str	r2, [r3, #0]
       TxHeader.IdType = FDCAN_EXTENDED_ID; //Cambie esto
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d56:	605a      	str	r2, [r3, #4]
       TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
       TxHeader.DataLength = FDCAN_DLC_BYTES_8; //Cambio a 8 bits
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d64:	60da      	str	r2, [r3, #12]
       TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
       TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d72:	615a      	str	r2, [r3, #20]
       TxHeader.FDFormat = FDCAN_FD_CAN;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d7a:	619a      	str	r2, [r3, #24]
       TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
       TxHeader.MessageMarker = 0x00;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <MX_FDCAN1_Init+0x154>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
      /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	240000f8 	.word	0x240000f8
 8000d90:	4000a000 	.word	0x4000a000
 8000d94:	24000228 	.word	0x24000228
 8000d98:	24000248 	.word	0x24000248
 8000d9c:	18feeea3 	.word	0x18feeea3

08000da0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000da6:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <MX_USART3_UART_Init+0x94>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dea:	f006 f997 	bl	800711c <HAL_UART_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df4:	f000 f8c6 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dfc:	f007 fa9e 	bl	800833c <HAL_UARTEx_SetTxFifoThreshold>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e06:	f000 f8bd 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4808      	ldr	r0, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f007 fad3 	bl	80083b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e18:	f000 f8b4 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_USART3_UART_Init+0x90>)
 8000e1e:	f007 fa54 	bl	80082ca <HAL_UARTEx_DisableFifoMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e28:	f000 f8ac 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000198 	.word	0x24000198
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6c:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a40      	ldr	r2, [pc, #256]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a38      	ldr	r2, [pc, #224]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a29      	ldr	r2, [pc, #164]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_GPIO_Init+0x13c>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Compresor_Pin|Valvula_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2160      	movs	r1, #96	; 0x60
 8000f06:	481c      	ldr	r0, [pc, #112]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000f08:	f002 ff06 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f12:	481a      	ldr	r0, [pc, #104]	; (8000f7c <MX_GPIO_Init+0x144>)
 8000f14:	f002 ff00 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000f2e:	f002 fd43 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Compresor_Pin Valvula_Pin */
  GPIO_InitStruct.Pin = Compresor_Pin|Valvula_Pin;
 8000f32:	2360      	movs	r3, #96	; 0x60
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <MX_GPIO_Init+0x140>)
 8000f4a:	f002 fd35 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000f4e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_GPIO_Init+0x144>)
 8000f68:	f002 fd26 	bl	80039b8 <HAL_GPIO_Init>

}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020000 	.word	0x58020000
 8000f7c:	58020400 	.word	0x58020400
 8000f80:	58020800 	.word	0x58020800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f98:	1d39      	adds	r1, r7, #4
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <__io_putchar+0x20>)
 8000fa2:	f006 f90b 	bl	80071bc <HAL_UART_Transmit>
  return ch;
 8000fa6:	687b      	ldr	r3, [r7, #4]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	24000198 	.word	0x24000198

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0b8      	sub	sp, #224	; 0xe0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	22bc      	movs	r2, #188	; 0xbc
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f007 fa99 	bl	8008540 <memset>
  if(hadc->Instance==ADC3)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2a      	ldr	r2, [pc, #168]	; (80010bc <HAL_ADC_MspInit+0xd4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d14c      	bne.n	80010b2 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001018:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800101c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800101e:	2304      	movs	r3, #4
 8001020:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001022:	2309      	movs	r3, #9
 8001024:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001032:	23c0      	movs	r3, #192	; 0xc0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fedb 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001054:	f7ff ff96 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 8001060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_ADC_MspInit+0xd8>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_ADC_MspInit+0xdc>)
 80010ae:	f002 fc83 	bl	80039b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	37e0      	adds	r7, #224	; 0xe0
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	58026000 	.word	0x58026000
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58021400 	.word	0x58021400

080010c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0b8      	sub	sp, #224	; 0xe0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22bc      	movs	r2, #188	; 0xbc
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f007 fa29 	bl	8008540 <memset>
  if(hfdcan->Instance==FDCAN1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_FDCAN_MspInit+0xe8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d157      	bne.n	80011a8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001102:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fe7b 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001114:	f7ff ff36 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_FDCAN_MspInit+0xec>)
 800111a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800111e:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <HAL_FDCAN_MspInit+0xec>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_FDCAN_MspInit+0xec>)
 800112a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_FDCAN_MspInit+0xec>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_FDCAN_MspInit+0xec>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_FDCAN_MspInit+0xec>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin;
 8001154:	2301      	movs	r3, #1
 8001156:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800116c:	2309      	movs	r3, #9
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <HAL_FDCAN_MspInit+0xf0>)
 800117a:	f002 fc1d 	bl	80039b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FDCAN1_TX_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001196:	2309      	movs	r3, #9
 8001198:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_TX_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_FDCAN_MspInit+0xf0>)
 80011a4:	f002 fc08 	bl	80039b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	37e0      	adds	r7, #224	; 0xe0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	4000a000 	.word	0x4000a000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020c00 	.word	0x58020c00

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b8      	sub	sp, #224	; 0xe0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	22bc      	movs	r2, #188	; 0xbc
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f007 f9af 	bl	8008540 <memset>
  if(huart->Instance==USART3)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <HAL_UART_MspInit+0xc0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d142      	bne.n	8001272 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fe02 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001206:	f7ff febd 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_UART_MspInit+0xc4>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_UART_MspInit+0xc4>)
 8001212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_UART_MspInit+0xc4>)
 800121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0xc4>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_MspInit+0xc4>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0xc4>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0xc8>)
 800126e:	f002 fba3 	bl	80039b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	37e0      	adds	r7, #224	; 0xe0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004800 	.word	0x40004800
 8001280:	58024400 	.word	0x58024400
 8001284:	58020c00 	.word	0x58020c00

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f942 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00a      	b.n	8001304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ee:	f3af 8000 	nop.w
 80012f2:	4601      	mov	r1, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf0      	blt.n	80012ee <_read+0x12>
	}

return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e009      	b.n	800133c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe2d 	bl	8000f90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <_write+0x12>
	}
	return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	605a      	str	r2, [r3, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f007 f872 	bl	80084d0 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24080000 	.word	0x24080000
 8001418:	00000400 	.word	0x00000400
 800141c:	240002a4 	.word	0x240002a4
 8001420:	240002c0 	.word	0x240002c0

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001428:	f7ff f92c 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f007 f843 	bl	80084dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f9ab 	bl	80007b0 <main>
  bx  lr
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001460:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001464:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001468:	08009638 	.word	0x08009638
  ldr r2, =_sbss
 800146c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001470:	240002bc 	.word	0x240002bc

08001474 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC3_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f001 fba2 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001484:	f003 fae8 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_Init+0x68>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	4913      	ldr	r1, [pc, #76]	; (80014e4 <HAL_Init+0x6c>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_Init+0x68>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_Init+0x6c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_Init+0x70>)
 80014ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_Init+0x74>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c2:	200f      	movs	r0, #15
 80014c4:	f000 f814 	bl	80014f0 <HAL_InitTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e002      	b.n	80014d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014d2:	f7ff fd6f 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	58024400 	.word	0x58024400
 80014e4:	08009548 	.word	0x08009548
 80014e8:	24000004 	.word	0x24000004
 80014ec:	24000000 	.word	0x24000000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_InitTick+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e021      	b.n	8001548 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_InitTick+0x64>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fb79 	bl	8002c12 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f001 fb51 	bl	8002bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x68>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	24000010 	.word	0x24000010
 8001554:	24000000 	.word	0x24000000
 8001558:	2400000c 	.word	0x2400000c

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	24000010 	.word	0x24000010
 8001580:	240002a8 	.word	0x240002a8

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	240002a8 	.word	0x240002a8

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24000010 	.word	0x24000010

080015e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetREVID+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0c1b      	lsrs	r3, r3, #16
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	5c001000 	.word	0x5c001000

080015fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	; 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b087      	sub	sp, #28
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3360      	adds	r3, #96	; 0x60
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	601a      	str	r2, [r3, #0]
  }
}
 8001700:	bf00      	nop
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3330      	adds	r3, #48	; 0x30
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	4413      	add	r3, r2
 8001750:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	211f      	movs	r1, #31
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0e9b      	lsrs	r3, r3, #26
 800176a:	f003 011f 	and.w	r1, r3, #31
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800178a:	b480      	push	{r7}
 800178c:	b087      	sub	sp, #28
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3314      	adds	r3, #20
 800179a:	461a      	mov	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	0e5b      	lsrs	r3, r3, #25
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	0d1b      	lsrs	r3, r3, #20
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	2107      	movs	r1, #7
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	0d1b      	lsrs	r3, r3, #20
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017f8:	43db      	mvns	r3, r3
 80017fa:	401a      	ands	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0318 	and.w	r3, r3, #24
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001804:	40d9      	lsrs	r1, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	400b      	ands	r3, r1
 800180a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800180e:	431a      	orrs	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	000fffff 	.word	0x000fffff

08001828 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 031f 	and.w	r3, r3, #31
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <LL_ADC_DisableDeepPowerDown+0x20>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6093      	str	r3, [r2, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	5fffffc0 	.word	0x5fffffc0

08001884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001898:	d101      	bne.n	800189e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	6fffffc0 	.word	0x6fffffc0

080018d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018e8:	d101      	bne.n	80018ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <LL_ADC_Enable+0x24>)
 800190a:	4013      	ands	r3, r2
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	7fffffc0 	.word	0x7fffffc0

08001924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <LL_ADC_IsEnabled+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_IsEnabled+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <LL_ADC_REG_StartConversion+0x24>)
 800195a:	4013      	ands	r3, r2
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	7fffffc0 	.word	0x7fffffc0

08001974 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b04      	cmp	r3, #4
 8001986:	d101      	bne.n	800198c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d101      	bne.n	80019b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e18f      	b.n	8001cfa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff fafd 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff3f 	bl	8001884 <LL_ADC_IsDeepPowerDownEnabled>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff25 	bl	8001860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff5a 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d114      	bne.n	8001a50 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff3e 	bl	80018ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a30:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <HAL_ADC_Init+0x290>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	4a87      	ldr	r2, [pc, #540]	; (8001c54 <HAL_ADC_Init+0x294>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a42:	e002      	b.n	8001a4a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f9      	bne.n	8001a44 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff3d 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10d      	bne.n	8001a7c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff77 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8001a86:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 8129 	bne.w	8001ce8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 8125 	bne.w	8001ce8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001aa6:	f043 0202 	orr.w	r2, r3, #2
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff36 	bl	8001924 <LL_ADC_IsEnabled>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d136      	bne.n	8001b2c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_ADC_Init+0x298>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_ADC_Init+0x112>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a63      	ldr	r2, [pc, #396]	; (8001c5c <HAL_ADC_Init+0x29c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10e      	bne.n	8001af0 <HAL_ADC_Init+0x130>
 8001ad2:	4861      	ldr	r0, [pc, #388]	; (8001c58 <HAL_ADC_Init+0x298>)
 8001ad4:	f7ff ff26 	bl	8001924 <LL_ADC_IsEnabled>
 8001ad8:	4604      	mov	r4, r0
 8001ada:	4860      	ldr	r0, [pc, #384]	; (8001c5c <HAL_ADC_Init+0x29c>)
 8001adc:	f7ff ff22 	bl	8001924 <LL_ADC_IsEnabled>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4323      	orrs	r3, r4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e008      	b.n	8001b02 <HAL_ADC_Init+0x142>
 8001af0:	485b      	ldr	r0, [pc, #364]	; (8001c60 <HAL_ADC_Init+0x2a0>)
 8001af2:	f7ff ff17 	bl	8001924 <LL_ADC_IsEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d012      	beq.n	8001b2c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_ADC_Init+0x298>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_Init+0x15a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a51      	ldr	r2, [pc, #324]	; (8001c5c <HAL_ADC_Init+0x29c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x15e>
 8001b1a:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_ADC_Init+0x2a4>)
 8001b1c:	e000      	b.n	8001b20 <HAL_ADC_Init+0x160>
 8001b1e:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_ADC_Init+0x2a8>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7ff fd68 	bl	80015fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b2c:	f7ff fd5a 	bl	80015e4 <HAL_GetREVID>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d914      	bls.n	8001b64 <HAL_ADC_Init+0x1a4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d110      	bne.n	8001b64 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7d5b      	ldrb	r3, [r3, #21]
 8001b46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b4c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7f1b      	ldrb	r3, [r3, #28]
 8001b58:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b5a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b5c:	f043 030c 	orr.w	r3, r3, #12
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e00d      	b.n	8001b80 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7d5b      	ldrb	r3, [r3, #21]
 8001b68:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b6e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b74:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7f1b      	ldrb	r3, [r3, #28]
 8001b7a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7f1b      	ldrb	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	045b      	lsls	r3, r3, #17
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_ADC_Init+0x2ac>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	69b9      	ldr	r1, [r7, #24]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fed2 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8001bd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fedf 	bl	800199a <LL_ADC_INJ_IsConversionOngoing>
 8001bdc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d15f      	bne.n	8001ca4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d15c      	bne.n	8001ca4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7d1b      	ldrb	r3, [r3, #20]
 8001bee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_ADC_Init+0x2b0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d130      	bne.n	8001c78 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_ADC_Init+0x2b4>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c2a:	3a01      	subs	r2, #1
 8001c2c:	0411      	lsls	r1, r2, #16
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	e01c      	b.n	8001c88 <HAL_ADC_Init+0x2c8>
 8001c4e:	bf00      	nop
 8001c50:	24000000 	.word	0x24000000
 8001c54:	053e2d63 	.word	0x053e2d63
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40022100 	.word	0x40022100
 8001c60:	58026000 	.word	0x58026000
 8001c64:	40022300 	.word	0x40022300
 8001c68:	58026300 	.word	0x58026300
 8001c6c:	fff0c003 	.word	0xfff0c003
 8001c70:	ffffbffc 	.word	0xffffbffc
 8001c74:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fdd6 	bl	8002850 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10c      	bne.n	8001cc6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f023 010f 	bic.w	r1, r3, #15
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	e007      	b.n	8001cd6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 020f 	bic.w	r2, r2, #15
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ce6:	e007      	b.n	8001cf8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f043 0210 	orr.w	r2, r3, #16
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	bf00      	nop

08001d04 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <HAL_ADC_Start+0x180>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_ADC_Start+0x1c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	; (8001e88 <HAL_ADC_Start+0x184>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_Start+0x20>
 8001d20:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_ADC_Start+0x188>)
 8001d22:	e000      	b.n	8001d26 <HAL_ADC_Start+0x22>
 8001d24:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <HAL_ADC_Start+0x18c>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fd7e 	bl	8001828 <LL_ADC_GetMultimode>
 8001d2c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe1e 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 809a 	bne.w	8001e74 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Start+0x4a>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e095      	b.n	8001e7a <HAL_ADC_Start+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fcf0 	bl	800273c <ADC_Enable>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8081 	bne.w	8001e6a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d6c:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_ADC_Start+0x190>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_ADC_Start+0x184>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d002      	beq.n	8001d88 <HAL_ADC_Start+0x84>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Start+0x86>
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_ADC_Start+0x180>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d002      	beq.n	8001d98 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db0:	d106      	bne.n	8001dc0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	f023 0206 	bic.w	r2, r3, #6
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8001dbe:	e002      	b.n	8001dc6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	221c      	movs	r2, #28
 8001dcc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_ADC_Start+0x184>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d002      	beq.n	8001de6 <HAL_ADC_Start+0xe2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e000      	b.n	8001de8 <HAL_ADC_Start+0xe4>
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_ADC_Start+0x180>)
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d008      	beq.n	8001e02 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d002      	beq.n	8001e02 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d114      	bne.n	8001e2c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd91 	bl	800194c <LL_ADC_REG_StartConversion>
 8001e2a:	e025      	b.n	8001e78 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <HAL_ADC_Start+0x184>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d002      	beq.n	8001e48 <HAL_ADC_Start+0x144>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e000      	b.n	8001e4a <HAL_ADC_Start+0x146>
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_ADC_Start+0x180>)
 8001e4a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00f      	beq.n	8001e78 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
 8001e68:	e006      	b.n	8001e78 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e72:	e001      	b.n	8001e78 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
 8001e76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40022100 	.word	0x40022100
 8001e8c:	40022300 	.word	0x40022300
 8001e90:	58026300 	.word	0x58026300
 8001e94:	fffff0fe 	.word	0xfffff0fe

08001e98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_ADC_PollForConversion+0x1d8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_PollForConversion+0x1e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a70      	ldr	r2, [pc, #448]	; (8002074 <HAL_ADC_PollForConversion+0x1dc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_PollForConversion+0x22>
 8001eb6:	4b70      	ldr	r3, [pc, #448]	; (8002078 <HAL_ADC_PollForConversion+0x1e0>)
 8001eb8:	e000      	b.n	8001ebc <HAL_ADC_PollForConversion+0x24>
 8001eba:	4b70      	ldr	r3, [pc, #448]	; (800207c <HAL_ADC_PollForConversion+0x1e4>)
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fcb3 	bl	8001828 <LL_ADC_GetMultimode>
 8001ec2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d102      	bne.n	8001ed2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	e037      	b.n	8001f42 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d002      	beq.n	8001ee4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b09      	cmp	r3, #9
 8001ee2:	d111      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0b1      	b.n	8002066 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f02:	2304      	movs	r3, #4
 8001f04:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f06:	e01c      	b.n	8001f42 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_ADC_PollForConversion+0x1d8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x84>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a57      	ldr	r2, [pc, #348]	; (8002074 <HAL_ADC_PollForConversion+0x1dc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x88>
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_ADC_PollForConversion+0x1e0>)
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_PollForConversion+0x8a>
 8001f20:	4b56      	ldr	r3, [pc, #344]	; (800207c <HAL_ADC_PollForConversion+0x1e4>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc8e 	bl	8001844 <LL_ADC_GetMultiDMATransfer>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f043 0220 	orr.w	r2, r3, #32
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e093      	b.n	8002066 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f3e:	2304      	movs	r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f42:	f7ff fb1f 	bl	8001584 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f48:	e021      	b.n	8001f8e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d01d      	beq.n	8001f8e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f52:	f7ff fb17 	bl	8001584 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <HAL_ADC_PollForConversion+0xd0>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d112      	bne.n	8001f8e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10b      	bne.n	8001f8e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0204 	orr.w	r2, r3, #4
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e06b      	b.n	8002066 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0d6      	beq.n	8001f4a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fbad 	bl	800170c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01c      	beq.n	8001ff2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7d5b      	ldrb	r3, [r3, #21]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d118      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d111      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_ADC_PollForConversion+0x1dc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d002      	beq.n	8002002 <HAL_ADC_PollForConversion+0x16a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e000      	b.n	8002004 <HAL_ADC_PollForConversion+0x16c>
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_ADC_PollForConversion+0x1d8>)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	d008      	beq.n	800201e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d002      	beq.n	800201e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d104      	bne.n	8002028 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	e00c      	b.n	8002042 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_ADC_PollForConversion+0x1dc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d002      	beq.n	8002038 <HAL_ADC_PollForConversion+0x1a0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e000      	b.n	800203a <HAL_ADC_PollForConversion+0x1a2>
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_ADC_PollForConversion+0x1d8>)
 800203a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d104      	bne.n	8002052 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2208      	movs	r2, #8
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e008      	b.n	8002064 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	220c      	movs	r2, #12
 8002062:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	40022100 	.word	0x40022100
 8002078:	40022300 	.word	0x40022300
 800207c:	58026300 	.word	0x58026300

08002080 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b0a1      	sub	sp, #132	; 0x84
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a9d      	ldr	r2, [pc, #628]	; (800232c <HAL_ADC_ConfigChannel+0x290>)
 80020b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x2a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e321      	b.n	800270a <HAL_ADC_ConfigChannel+0x66e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fc4e 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 8306 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d108      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x62>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	e016      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800210c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800210e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800211a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2201      	movs	r2, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	69d1      	ldr	r1, [r2, #28]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	430b      	orrs	r3, r1
 8002138:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	f7ff faf3 	bl	8001732 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fc0f 	bl	8001974 <LL_ADC_REG_IsConversionOngoing>
 8002156:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc1c 	bl	800199a <LL_ADC_INJ_IsConversionOngoing>
 8002162:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80b3 	bne.w	80022d2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80af 	bne.w	80022d2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	461a      	mov	r2, r3
 8002182:	f7ff fb02 	bl	800178a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002186:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_ADC_ConfigChannel+0x294>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800218e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x110>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	e01d      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x14c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x136>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	e00a      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x14c>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d027      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002200:	f7ff fa30 	bl	8001664 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6919      	ldr	r1, [r3, #16]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7e5b      	ldrb	r3, [r3, #25]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_ADC_ConfigChannel+0x17e>
 8002214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002218:	e000      	b.n	800221c <HAL_ADC_ConfigChannel+0x180>
 800221a:	2300      	movs	r3, #0
 800221c:	461a      	mov	r2, r3
 800221e:	f7ff fa5a 	bl	80016d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7e1b      	ldrb	r3, [r3, #24]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x19c>
 8002232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002236:	e000      	b.n	800223a <HAL_ADC_ConfigChannel+0x19e>
 8002238:	2300      	movs	r3, #0
 800223a:	461a      	mov	r2, r3
 800223c:	f7ff fa32 	bl	80016a4 <LL_ADC_SetDataRightShift>
 8002240:	e047      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	429a      	cmp	r2, r3
 8002254:	d107      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800226c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	069b      	lsls	r3, r3, #26
 8002276:	429a      	cmp	r2, r3
 8002278:	d107      	bne.n	800228a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002288:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	429a      	cmp	r2, r3
 800229c:	d107      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ac:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	429a      	cmp	r2, r3
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fb24 	bl	8001924 <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 820d 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f7ff fa75 	bl	80017e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_ADC_ConfigChannel+0x290>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	f040 8133 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800230e:	2b00      	cmp	r3, #0
 8002310:	d110      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x298>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2b09      	cmp	r3, #9
 8002320:	bf94      	ite	ls
 8002322:	2301      	movls	r3, #1
 8002324:	2300      	movhi	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	e01e      	b.n	8002368 <HAL_ADC_ConfigChannel+0x2cc>
 800232a:	bf00      	nop
 800232c:	47ff0000 	.word	0x47ff0000
 8002330:	5c001000 	.word	0x5c001000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e003      	b.n	8002358 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2b09      	cmp	r3, #9
 8002360:	bf94      	ite	ls
 8002362:	2301      	movls	r3, #1
 8002364:	2300      	movhi	r3, #0
 8002366:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002368:	2b00      	cmp	r3, #0
 800236a:	d079      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x2ec>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	069b      	lsls	r3, r3, #26
 8002382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002386:	e015      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x318>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002398:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800239a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	069b      	lsls	r3, r3, #26
 80023b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x338>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	e017      	b.n	8002404 <HAL_ADC_ConfigChannel+0x368>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80023f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	ea42 0103 	orr.w	r1, r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x38e>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	051b      	lsls	r3, r3, #20
 8002428:	e018      	b.n	800245c <HAL_ADC_ConfigChannel+0x3c0>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
 800245e:	e07e      	b.n	800255e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_ADC_ConfigChannel+0x3e0>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247a:	e015      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x40c>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x42c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	e017      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x45c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	61bb      	str	r3, [r7, #24]
  return result;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	ea42 0103 	orr.w	r1, r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x488>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	3b1e      	subs	r3, #30
 800251c:	051b      	lsls	r3, r3, #20
 800251e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002522:	e01b      	b.n	800255c <HAL_ADC_ConfigChannel+0x4c0>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	60fb      	str	r3, [r7, #12]
  return result;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	3b1e      	subs	r3, #30
 8002556:	051b      	lsls	r3, r3, #20
 8002558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255c:	430b      	orrs	r3, r1
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6892      	ldr	r2, [r2, #8]
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff f911 	bl	800178a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f280 80c6 	bge.w	80026fe <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x4ea>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a65      	ldr	r2, [pc, #404]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x4ee>
 8002586:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 8002588:	e000      	b.n	800258c <HAL_ADC_ConfigChannel+0x4f0>
 800258a:	4b65      	ldr	r3, [pc, #404]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f85b 	bl	8001648 <LL_ADC_GetCommonPathInternalCh>
 8002592:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x50c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5d      	ldr	r2, [pc, #372]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10e      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x52a>
 80025a8:	485a      	ldr	r0, [pc, #360]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 80025aa:	f7ff f9bb 	bl	8001924 <LL_ADC_IsEnabled>
 80025ae:	4604      	mov	r4, r0
 80025b0:	4859      	ldr	r0, [pc, #356]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80025b2:	f7ff f9b7 	bl	8001924 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4323      	orrs	r3, r4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e008      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x53c>
 80025c6:	4857      	ldr	r0, [pc, #348]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 80025c8:	f7ff f9ac 	bl	8001924 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d07d      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a51      	ldr	r2, [pc, #324]	; (8002728 <HAL_ADC_ConfigChannel+0x68c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d130      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5ac>
 80025e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d12b      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	f040 8081 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x574>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a43      	ldr	r2, [pc, #268]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x578>
 8002610:	4a42      	ldr	r2, [pc, #264]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x57a>
 8002614:	4a42      	ldr	r2, [pc, #264]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f7fe ffff 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_ADC_ConfigChannel+0x690>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	4a41      	ldr	r2, [pc, #260]	; (8002730 <HAL_ADC_ConfigChannel+0x694>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002638:	e002      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002646:	e05a      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a39      	ldr	r2, [pc, #228]	; (8002734 <HAL_ADC_ConfigChannel+0x698>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11e      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5f4>
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a30      	ldr	r2, [pc, #192]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d14b      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_ADC_ConfigChannel+0x5de>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x5e2>
 800267a:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 800267c:	e000      	b.n	8002680 <HAL_ADC_ConfigChannel+0x5e4>
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 8002680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7fe ffca 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800268e:	e036      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a28      	ldr	r2, [pc, #160]	; (8002738 <HAL_ADC_ConfigChannel+0x69c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d131      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
 800269a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d12c      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_ADC_ConfigChannel+0x688>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d127      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x626>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a16      	ldr	r2, [pc, #88]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x62a>
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_ADC_ConfigChannel+0x680>)
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x62c>
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_ADC_ConfigChannel+0x684>)
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f7fe ffa6 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
 80026d6:	e012      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026ea:	e008      	b.n	80026fe <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002706:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800270a:	4618      	mov	r0, r3
 800270c:	3784      	adds	r7, #132	; 0x84
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40022100 	.word	0x40022100
 800271c:	40022300 	.word	0x40022300
 8002720:	58026300 	.word	0x58026300
 8002724:	58026000 	.word	0x58026000
 8002728:	cb840000 	.word	0xcb840000
 800272c:	24000000 	.word	0x24000000
 8002730:	053e2d63 	.word	0x053e2d63
 8002734:	c7520000 	.word	0xc7520000
 8002738:	cfb80000 	.word	0xcfb80000

0800273c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f8eb 	bl	8001924 <LL_ADC_IsEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d16e      	bne.n	8002832 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <ADC_Enable+0x100>)
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e05a      	b.n	8002834 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f8ba 	bl	80018fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002788:	f7fe fefc 	bl	8001584 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <ADC_Enable+0x104>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <ADC_Enable+0x66>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <ADC_Enable+0x108>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <ADC_Enable+0x6a>
 80027a2:	4b29      	ldr	r3, [pc, #164]	; (8002848 <ADC_Enable+0x10c>)
 80027a4:	e000      	b.n	80027a8 <ADC_Enable+0x6c>
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <ADC_Enable+0x110>)
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f83d 	bl	8001828 <LL_ADC_GetMultimode>
 80027ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <ADC_Enable+0x108>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d002      	beq.n	80027c0 <ADC_Enable+0x84>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	e000      	b.n	80027c2 <ADC_Enable+0x86>
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <ADC_Enable+0x104>)
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d02c      	beq.n	8002824 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d130      	bne.n	8002832 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027d0:	e028      	b.n	8002824 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff f8a4 	bl	8001924 <LL_ADC_IsEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f888 	bl	80018fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ec:	f7fe feca 	bl	8001584 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d914      	bls.n	8002824 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d00d      	beq.n	8002824 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d1cf      	bne.n	80027d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	8000003f 	.word	0x8000003f
 8002840:	40022000 	.word	0x40022000
 8002844:	40022100 	.word	0x40022100
 8002848:	40022300 	.word	0x40022300
 800284c:	58026300 	.word	0x58026300

08002850 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a79      	ldr	r2, [pc, #484]	; (8002a44 <ADC_ConfigureBoostMode+0x1f4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <ADC_ConfigureBoostMode+0x1c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a78      	ldr	r2, [pc, #480]	; (8002a48 <ADC_ConfigureBoostMode+0x1f8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d109      	bne.n	8002880 <ADC_ConfigureBoostMode+0x30>
 800286c:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <ADC_ConfigureBoostMode+0x1fc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e008      	b.n	8002892 <ADC_ConfigureBoostMode+0x42>
 8002880:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <ADC_ConfigureBoostMode+0x200>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01c      	beq.n	80028d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002896:	f002 fa59 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 800289a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028a4:	d010      	beq.n	80028c8 <ADC_ConfigureBoostMode+0x78>
 80028a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028aa:	d871      	bhi.n	8002990 <ADC_ConfigureBoostMode+0x140>
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b0:	d002      	beq.n	80028b8 <ADC_ConfigureBoostMode+0x68>
 80028b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b6:	d16b      	bne.n	8002990 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	60fb      	str	r3, [r7, #12]
        break;
 80028c6:	e066      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	60fb      	str	r3, [r7, #12]
        break;
 80028ce:	e062      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028d4:	f003 f9dc 	bl	8005c90 <HAL_RCCEx_GetPeriphCLKFreq>
 80028d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028e2:	d051      	beq.n	8002988 <ADC_ConfigureBoostMode+0x138>
 80028e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028e8:	d854      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 80028ea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028ee:	d047      	beq.n	8002980 <ADC_ConfigureBoostMode+0x130>
 80028f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028f4:	d84e      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 80028f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028fa:	d03d      	beq.n	8002978 <ADC_ConfigureBoostMode+0x128>
 80028fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002900:	d848      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 8002902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002906:	d033      	beq.n	8002970 <ADC_ConfigureBoostMode+0x120>
 8002908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290c:	d842      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 800290e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002912:	d029      	beq.n	8002968 <ADC_ConfigureBoostMode+0x118>
 8002914:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002918:	d83c      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 800291a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800291e:	d01a      	beq.n	8002956 <ADC_ConfigureBoostMode+0x106>
 8002920:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002924:	d836      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 8002926:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800292a:	d014      	beq.n	8002956 <ADC_ConfigureBoostMode+0x106>
 800292c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002930:	d830      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002936:	d00e      	beq.n	8002956 <ADC_ConfigureBoostMode+0x106>
 8002938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293c:	d82a      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 800293e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002942:	d008      	beq.n	8002956 <ADC_ConfigureBoostMode+0x106>
 8002944:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002948:	d824      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x144>
 800294a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800294e:	d002      	beq.n	8002956 <ADC_ConfigureBoostMode+0x106>
 8002950:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002954:	d11e      	bne.n	8002994 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0c9b      	lsrs	r3, r3, #18
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	60fb      	str	r3, [r7, #12]
        break;
 8002966:	e016      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
        break;
 800296e:	e012      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	60fb      	str	r3, [r7, #12]
        break;
 8002976:	e00e      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	60fb      	str	r3, [r7, #12]
        break;
 800297e:	e00a      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	09db      	lsrs	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
        break;
 8002986:	e006      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	60fb      	str	r3, [r7, #12]
        break;
 800298e:	e002      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
        break;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002994:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002996:	f7fe fe25 	bl	80015e4 <HAL_GetREVID>
 800299a:	4603      	mov	r3, r0
 800299c:	f241 0203 	movw	r2, #4099	; 0x1003
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d815      	bhi.n	80029d0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a2b      	ldr	r2, [pc, #172]	; (8002a54 <ADC_ConfigureBoostMode+0x204>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d908      	bls.n	80029be <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029bc:	e03e      	b.n	8002a3c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	609a      	str	r2, [r3, #8]
}
 80029ce:	e035      	b.n	8002a3c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <ADC_ConfigureBoostMode+0x208>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d808      	bhi.n	80029f0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	e025      	b.n	8002a3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <ADC_ConfigureBoostMode+0x20c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d80a      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	e016      	b.n	8002a3c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <ADC_ConfigureBoostMode+0x210>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d80a      	bhi.n	8002a2c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	e007      	b.n	8002a3c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40022100 	.word	0x40022100
 8002a4c:	40022300 	.word	0x40022300
 8002a50:	58026300 	.word	0x58026300
 8002a54:	01312d00 	.word	0x01312d00
 8002a58:	005f5e10 	.word	0x005f5e10
 8002a5c:	00bebc20 	.word	0x00bebc20
 8002a60:	017d7840 	.word	0x017d7840

08002a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a92:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	60d3      	str	r3, [r2, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00
 8002aa8:	05fa0000 	.word	0x05fa0000

08002aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 0307 	and.w	r3, r3, #7
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f7ff ff8e 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff47 	bl	8002a64 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bec:	f7ff ff5e 	bl	8002aac <__NVIC_GetPriorityGrouping>
 8002bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff90 	bl	8002b1c <NVIC_EncodePriority>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5f 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ffb2 	bl	8002b84 <SysTick_Config>
 8002c20:	4603      	mov	r3, r0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b098      	sub	sp, #96	; 0x60
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002c34:	4a84      	ldr	r2, [pc, #528]	; (8002e48 <HAL_FDCAN_Init+0x21c>)
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	224c      	movs	r2, #76	; 0x4c
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f005 fc70 	bl	8008524 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e1c6      	b.n	8002fdc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7e      	ldr	r2, [pc, #504]	; (8002e4c <HAL_FDCAN_Init+0x220>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d106      	bne.n	8002c66 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fa24 	bl	80010c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0210 	bic.w	r2, r2, #16
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c90:	f7fe fc78 	bl	8001584 <HAL_GetTick>
 8002c94:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c96:	e014      	b.n	8002cc2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c98:	f7fe fc74 	bl	8001584 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b0a      	cmp	r3, #10
 8002ca4:	d90d      	bls.n	8002cc2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e18c      	b.n	8002fdc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d0e3      	beq.n	8002c98 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce0:	f7fe fc50 	bl	8001584 <HAL_GetTick>
 8002ce4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ce6:	e014      	b.n	8002d12 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ce8:	f7fe fc4c 	bl	8001584 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b0a      	cmp	r3, #10
 8002cf4:	d90d      	bls.n	8002d12 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e164      	b.n	8002fdc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0e3      	beq.n	8002ce8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0202 	orr.w	r2, r2, #2
 8002d2e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7c1b      	ldrb	r3, [r3, #16]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d108      	bne.n	8002d4a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	e007      	b.n	8002d5a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d58:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7c5b      	ldrb	r3, [r3, #17]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d70:	619a      	str	r2, [r3, #24]
 8002d72:	e007      	b.n	8002d84 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d82:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7c9b      	ldrb	r3, [r3, #18]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d9a:	619a      	str	r2, [r3, #24]
 8002d9c:	e007      	b.n	8002dae <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dac:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002dd2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0210 	bic.w	r2, r2, #16
 8002de2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d108      	bne.n	8002dfe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0204 	orr.w	r2, r2, #4
 8002dfa:	619a      	str	r2, [r3, #24]
 8002dfc:	e030      	b.n	8002e60 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02c      	beq.n	8002e60 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d020      	beq.n	8002e50 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e1c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0210 	orr.w	r2, r2, #16
 8002e2c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d114      	bne.n	8002e60 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0220 	orr.w	r2, r2, #32
 8002e44:	619a      	str	r2, [r3, #24]
 8002e46:	e00b      	b.n	8002e60 <HAL_FDCAN_Init+0x234>
 8002e48:	080094fc 	.word	0x080094fc
 8002e4c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0220 	orr.w	r2, r2, #32
 8002e5e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e70:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e78:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e88:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e8a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e94:	d115      	bne.n	8002ec2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ea4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002eae:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002ebe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ec0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	4413      	add	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d011      	beq.n	8002f12 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002ef6:	f023 0107 	bic.w	r1, r3, #7
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3360      	adds	r3, #96	; 0x60
 8002f02:	443b      	add	r3, r7
 8002f04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d011      	beq.n	8002f3e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f22:	f023 0107 	bic.w	r1, r3, #7
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	3360      	adds	r3, #96	; 0x60
 8002f2e:	443b      	add	r3, r7
 8002f30:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f4e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	3360      	adds	r3, #96	; 0x60
 8002f5a:	443b      	add	r3, r7
 8002f5c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f60:	011a      	lsls	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f7c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	3360      	adds	r3, #96	; 0x60
 8002f88:	443b      	add	r3, r7
 8002f8a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <HAL_FDCAN_Init+0x3b8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f022 0203 	bic.w	r2, r2, #3
 8002fb2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 faef 	bl	80035b0 <FDCAN_CalcultateRamBlockAddresses>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002fd8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3760      	adds	r7, #96	; 0x60
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	4000a000 	.word	0x4000a000

08002fe8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002ff8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d002      	beq.n	8003006 <HAL_FDCAN_ConfigFilter+0x1e>
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d157      	bne.n	80030b6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d12b      	bne.n	8003066 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b07      	cmp	r3, #7
 8003014:	d10d      	bne.n	8003032 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003022:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003028:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800302a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e00e      	b.n	8003050 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800303e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003046:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e025      	b.n	80030b2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	075a      	lsls	r2, r3, #29
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b07      	cmp	r3, #7
 800307a:	d103      	bne.n	8003084 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e006      	b.n	8003092 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	079a      	lsls	r2, r3, #30
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3304      	adds	r3, #4
 80030aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e008      	b.n	80030c8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030bc:	f043 0202 	orr.w	r2, r3, #2
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
  }
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d111      	bne.n	800310c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e008      	b.n	800311e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d141      	bne.n	80031c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800314a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e038      	b.n	80031d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800316e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800317c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e026      	b.n	80031d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fb8b 	bl	80038bc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80031b6:	2201      	movs	r2, #1
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e008      	b.n	80031d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031cc:	f043 0208 	orr.w	r2, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b08b      	sub	sp, #44	; 0x2c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031f8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80031fa:	7efb      	ldrb	r3, [r7, #27]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	f040 814b 	bne.w	8003498 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d14d      	bne.n	80032a4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003210:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e13e      	b.n	80034aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e12c      	b.n	80034aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d10b      	bne.n	800327a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800326a:	0fdb      	lsrs	r3, r3, #31
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003274:	d101      	bne.n	800327a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003276:	2301      	movs	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	69f9      	ldr	r1, [r7, #28]
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	e069      	b.n	8003378 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b41      	cmp	r3, #65	; 0x41
 80032a8:	d14d      	bne.n	8003346 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0ed      	b.n	80034aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0db      	b.n	80034aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032fa:	0e1b      	lsrs	r3, r3, #24
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10b      	bne.n	800331c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800330c:	0fdb      	lsrs	r3, r3, #31
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003316:	d101      	bne.n	800331c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003318:	2301      	movs	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	69f9      	ldr	r1, [r7, #28]
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	e018      	b.n	8003378 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d309      	bcc.n	8003364 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0a2      	b.n	80034aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0c9b      	lsrs	r3, r3, #18
 8003392:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e005      	b.n	80033a8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	3304      	adds	r3, #4
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0e1b      	lsrs	r3, r3, #24
 80033fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0fda      	lsrs	r2, r3, #31
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3304      	adds	r3, #4
 8003410:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	e00a      	b.n	8003432 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	441a      	add	r2, r3
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	440b      	add	r3, r1
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	3301      	adds	r3, #1
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	461a      	mov	r2, r3
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	4293      	cmp	r3, r2
 8003442:	d3eb      	bcc.n	800341c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d105      	bne.n	8003456 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003454:	e01e      	b.n	8003494 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b41      	cmp	r3, #65	; 0x41
 800345a:	d105      	bne.n	8003468 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003466:	e015      	b.n	8003494 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b1f      	cmp	r3, #31
 800346c:	d808      	bhi.n	8003480 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800347e:	e009      	b.n	8003494 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 021f 	and.w	r2, r3, #31
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e008      	b.n	80034aa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349e:	f043 0208 	orr.w	r2, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	372c      	adds	r7, #44	; 0x2c
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	08009558 	.word	0x08009558

080034bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80034ce:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d002      	beq.n	80034dc <HAL_FDCAN_ActivateNotification+0x20>
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d155      	bne.n	8003588 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034fa:	e014      	b.n	8003526 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	429a      	cmp	r2, r3
 800350a:	d108      	bne.n	800351e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0202 	orr.w	r2, r2, #2
 800351a:	65da      	str	r2, [r3, #92]	; 0x5c
 800351c:	e003      	b.n	8003526 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2203      	movs	r2, #3
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	430a      	orrs	r2, r1
 8003540:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	430a      	orrs	r2, r1
 800355e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_FDCAN_ActivateNotification+0xec>)
 800356c:	4013      	ands	r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	430b      	orrs	r3, r1
 8003574:	6553      	str	r3, [r2, #84]	; 0x54
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_FDCAN_ActivateNotification+0xf0>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	0f9b      	lsrs	r3, r3, #30
 800357e:	490b      	ldr	r1, [pc, #44]	; (80035ac <HAL_FDCAN_ActivateNotification+0xf0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e008      	b.n	800359a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	3fcfffff 	.word	0x3fcfffff
 80035ac:	4000a800 	.word	0x4000a800

080035b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80035c6:	4ba7      	ldr	r3, [pc, #668]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0091      	lsls	r1, r2, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	4413      	add	r3, r2
 80035fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003606:	4b97      	ldr	r3, [pc, #604]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	0091      	lsls	r1, r2, #2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	430b      	orrs	r3, r1
 8003614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4413      	add	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003648:	4b86      	ldr	r3, [pc, #536]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800364a:	4013      	ands	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	0091      	lsls	r1, r2, #2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003662:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	041a      	lsls	r2, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003690:	4b74      	ldr	r3, [pc, #464]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	0091      	lsls	r1, r2, #2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	430b      	orrs	r3, r1
 800369e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	041a      	lsls	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	4413      	add	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	0091      	lsls	r1, r2, #2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003704:	4b57      	ldr	r3, [pc, #348]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	0091      	lsls	r1, r2, #2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	430b      	orrs	r3, r1
 8003712:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800371e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	4413      	add	r3, r2
 800373c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003748:	4013      	ands	r3, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	0091      	lsls	r1, r2, #2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	430b      	orrs	r3, r1
 8003754:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003760:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800377c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	061a      	lsls	r2, r3, #24
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003796:	4413      	add	r3, r2
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	441a      	add	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	4a04      	ldr	r2, [pc, #16]	; (800386c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d915      	bls.n	800388c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003860:	e006      	b.n	8003870 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003862:	bf00      	nop
 8003864:	ffff0003 	.word	0xffff0003
 8003868:	10002b00 	.word	0x10002b00
 800386c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2203      	movs	r2, #3
 8003884:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e010      	b.n	80038ae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e005      	b.n	80038a0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3304      	adds	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d3f3      	bcc.n	8003894 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop

080038bc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80038da:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e00a      	b.n	80038fe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80038f0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80038f6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038fc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003908:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800390e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003914:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003928:	6839      	ldr	r1, [r7, #0]
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	3304      	adds	r3, #4
 800393e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3304      	adds	r3, #4
 800394a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e020      	b.n	8003994 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3303      	adds	r3, #3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3302      	adds	r3, #2
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	440b      	add	r3, r1
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800396a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	440b      	add	r3, r1
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003978:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	440a      	add	r2, r1
 8003980:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003982:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	3304      	adds	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3304      	adds	r3, #4
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <FDCAN_CopyMessageToRAM+0xf8>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	461a      	mov	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d3d5      	bcc.n	8003952 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	3724      	adds	r7, #36	; 0x24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	08009558 	.word	0x08009558

080039b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_GPIO_Init+0x234>)
 80039c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039ca:	e194      	b.n	8003cf6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2101      	movs	r1, #1
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8186 	beq.w	8003cf0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d005      	beq.n	80039fc <HAL_GPIO_Init+0x44>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d130      	bne.n	8003a5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a32:	2201      	movs	r2, #1
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0201 	and.w	r2, r3, #1
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d017      	beq.n	8003a9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d123      	bne.n	8003aee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	08da      	lsrs	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3208      	adds	r2, #8
 8003aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	08da      	lsrs	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3208      	adds	r2, #8
 8003ae8:	69b9      	ldr	r1, [r7, #24]
 8003aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0203 	and.w	r2, r3, #3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80e0 	beq.w	8003cf0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b30:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <HAL_GPIO_Init+0x238>)
 8003b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b36:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <HAL_GPIO_Init+0x238>)
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_GPIO_Init+0x238>)
 8003b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b4e:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <HAL_GPIO_Init+0x23c>)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	220f      	movs	r2, #15
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <HAL_GPIO_Init+0x240>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d052      	beq.n	8003c20 <HAL_GPIO_Init+0x268>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_GPIO_Init+0x244>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_GPIO_Init+0x22e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_GPIO_Init+0x248>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d02b      	beq.n	8003be2 <HAL_GPIO_Init+0x22a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_GPIO_Init+0x24c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d025      	beq.n	8003bde <HAL_GPIO_Init+0x226>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_GPIO_Init+0x250>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01f      	beq.n	8003bda <HAL_GPIO_Init+0x222>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_GPIO_Init+0x254>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d019      	beq.n	8003bd6 <HAL_GPIO_Init+0x21e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_GPIO_Init+0x258>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_GPIO_Init+0x21a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_GPIO_Init+0x25c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00d      	beq.n	8003bce <HAL_GPIO_Init+0x216>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_GPIO_Init+0x260>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <HAL_GPIO_Init+0x212>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <HAL_GPIO_Init+0x264>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <HAL_GPIO_Init+0x20e>
 8003bc2:	2309      	movs	r3, #9
 8003bc4:	e02d      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	e02b      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	e029      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e027      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	e025      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	e023      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bda:	2304      	movs	r3, #4
 8003bdc:	e021      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e01f      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e01d      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e01b      	b.n	8003c22 <HAL_GPIO_Init+0x26a>
 8003bea:	bf00      	nop
 8003bec:	58000080 	.word	0x58000080
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	58000400 	.word	0x58000400
 8003bf8:	58020000 	.word	0x58020000
 8003bfc:	58020400 	.word	0x58020400
 8003c00:	58020800 	.word	0x58020800
 8003c04:	58020c00 	.word	0x58020c00
 8003c08:	58021000 	.word	0x58021000
 8003c0c:	58021400 	.word	0x58021400
 8003c10:	58021800 	.word	0x58021800
 8003c14:	58021c00 	.word	0x58021c00
 8003c18:	58022000 	.word	0x58022000
 8003c1c:	58022400 	.word	0x58022400
 8003c20:	2300      	movs	r3, #0
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	f002 0203 	and.w	r2, r2, #3
 8003c28:	0092      	lsls	r2, r2, #2
 8003c2a:	4093      	lsls	r3, r2
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c32:	4938      	ldr	r1, [pc, #224]	; (8003d14 <HAL_GPIO_Init+0x35c>)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f ae63 	bne.w	80039cc <HAL_GPIO_Init+0x14>
  }
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	3724      	adds	r7, #36	; 0x24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	58000400 	.word	0x58000400

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d34:	e003      	b.n	8003d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	041a      	lsls	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	619a      	str	r2, [r3, #24]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4013      	ands	r3, r2
 8003d62:	041a      	lsls	r2, r3, #16
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	619a      	str	r2, [r3, #24]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_HSEM_FastTake+0x2c>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3320      	adds	r3, #32
 8003d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d92:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_HSEM_FastTake+0x30>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	58026400 	.word	0x58026400
 8003db0:	80000300 	.word	0x80000300

08003db4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003dbe:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <HAL_HSEM_Release+0x24>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	58026400 	.word	0x58026400

08003ddc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d00a      	beq.n	8003e06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003df0:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d001      	beq.n	8003e02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e040      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e03e      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e06:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003e0e:	491f      	ldr	r1, [pc, #124]	; (8003e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e16:	f7fd fbb5 	bl	8001584 <HAL_GetTick>
 8003e1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e1c:	e009      	b.n	8003e32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e1e:	f7fd fbb1 	bl	8001584 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e2c:	d901      	bls.n	8003e32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e028      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	d1ee      	bne.n	8003e1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b1e      	cmp	r3, #30
 8003e44:	d008      	beq.n	8003e58 <HAL_PWREx_ConfigSupply+0x7c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b2e      	cmp	r3, #46	; 0x2e
 8003e4a:	d005      	beq.n	8003e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b1d      	cmp	r3, #29
 8003e50:	d002      	beq.n	8003e58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b2d      	cmp	r3, #45	; 0x2d
 8003e56:	d114      	bne.n	8003e82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003e58:	f7fd fb94 	bl	8001584 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e5e:	e009      	b.n	8003e74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e60:	f7fd fb90 	bl	8001584 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6e:	d901      	bls.n	8003e74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e007      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_PWREx_ConfigSupply+0xb0>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d1ee      	bne.n	8003e60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	58024800 	.word	0x58024800

08003e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	; 0x30
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f000 bc1d 	b.w	80046de <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8087 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4b99      	ldr	r3, [pc, #612]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ebc:	4b96      	ldr	r3, [pc, #600]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x48>
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	2b18      	cmp	r3, #24
 8003ecc:	d110      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x60>
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	4b8f      	ldr	r3, [pc, #572]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d06c      	beq.n	8003fbe <HAL_RCC_OscConfig+0x12e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d168      	bne.n	8003fbe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e3f6      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_OscConfig+0x78>
 8003efa:	4b87      	ldr	r3, [pc, #540]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a86      	ldr	r2, [pc, #536]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e02e      	b.n	8003f66 <HAL_RCC_OscConfig+0xd6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x9a>
 8003f10:	4b81      	ldr	r3, [pc, #516]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a80      	ldr	r2, [pc, #512]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7d      	ldr	r2, [pc, #500]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e01d      	b.n	8003f66 <HAL_RCC_OscConfig+0xd6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f32:	d10c      	bne.n	8003f4e <HAL_RCC_OscConfig+0xbe>
 8003f34:	4b78      	ldr	r3, [pc, #480]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a77      	ldr	r2, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b75      	ldr	r3, [pc, #468]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a74      	ldr	r2, [pc, #464]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e00b      	b.n	8003f66 <HAL_RCC_OscConfig+0xd6>
 8003f4e:	4b72      	ldr	r3, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a71      	ldr	r2, [pc, #452]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d013      	beq.n	8003f96 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6e:	f7fd fb09 	bl	8001584 <HAL_GetTick>
 8003f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f76:	f7fd fb05 	bl	8001584 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b64      	cmp	r3, #100	; 0x64
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e3aa      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f88:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0xe6>
 8003f94:	e014      	b.n	8003fc0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fd faf5 	bl	8001584 <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f9e:	f7fd faf1 	bl	8001584 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	; 0x64
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e396      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fb0:	4b59      	ldr	r3, [pc, #356]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x10e>
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80cb 	beq.w	8004164 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fce:	4b52      	ldr	r3, [pc, #328]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fd6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x164>
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b18      	cmp	r3, #24
 8003fe8:	d156      	bne.n	8004098 <HAL_RCC_OscConfig+0x208>
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d151      	bne.n	8004098 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff4:	4b48      	ldr	r3, [pc, #288]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_OscConfig+0x17c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e368      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800400c:	4b42      	ldr	r3, [pc, #264]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 0219 	bic.w	r2, r3, #25
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	493f      	ldr	r1, [pc, #252]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800401e:	f7fd fab1 	bl	8001584 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004026:	f7fd faad 	bl	8001584 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e352      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004038:	4b37      	ldr	r3, [pc, #220]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	f7fd face 	bl	80015e4 <HAL_GetREVID>
 8004048:	4603      	mov	r3, r0
 800404a:	f241 0203 	movw	r2, #4099	; 0x1003
 800404e:	4293      	cmp	r3, r2
 8004050:	d817      	bhi.n	8004082 <HAL_RCC_OscConfig+0x1f2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d108      	bne.n	800406c <HAL_RCC_OscConfig+0x1dc>
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004062:	4a2d      	ldr	r2, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8004064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004068:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406a:	e07b      	b.n	8004164 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	031b      	lsls	r3, r3, #12
 800407a:	4927      	ldr	r1, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004080:	e070      	b.n	8004164 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	4921      	ldr	r1, [pc, #132]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004096:	e065      	b.n	8004164 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d048      	beq.n	8004132 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 0219 	bic.w	r2, r3, #25
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	491a      	ldr	r1, [pc, #104]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd fa67 	bl	8001584 <HAL_GetTick>
 80040b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd fa63 	bl	8001584 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e308      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	f7fd fa84 	bl	80015e4 <HAL_GetREVID>
 80040dc:	4603      	mov	r3, r0
 80040de:	f241 0203 	movw	r2, #4099	; 0x1003
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d81a      	bhi.n	800411c <HAL_RCC_OscConfig+0x28c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d108      	bne.n	8004100 <HAL_RCC_OscConfig+0x270>
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	6053      	str	r3, [r2, #4]
 80040fe:	e031      	b.n	8004164 <HAL_RCC_OscConfig+0x2d4>
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	4902      	ldr	r1, [pc, #8]	; (8004118 <HAL_RCC_OscConfig+0x288>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
 8004114:	e026      	b.n	8004164 <HAL_RCC_OscConfig+0x2d4>
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
 800411c:	4b9a      	ldr	r3, [pc, #616]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	4997      	ldr	r1, [pc, #604]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
 8004130:	e018      	b.n	8004164 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b95      	ldr	r3, [pc, #596]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a94      	ldr	r2, [pc, #592]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fa21 	bl	8001584 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004146:	f7fd fa1d 	bl	8001584 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e2c2      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004158:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a9 	beq.w	80042c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004172:	4b85      	ldr	r3, [pc, #532]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800417a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800417c:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d007      	beq.n	8004198 <HAL_RCC_OscConfig+0x308>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b18      	cmp	r3, #24
 800418c:	d13a      	bne.n	8004204 <HAL_RCC_OscConfig+0x374>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d135      	bne.n	8004204 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004198:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_OscConfig+0x320>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e296      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b0:	f7fd fa18 	bl	80015e4 <HAL_GetREVID>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d817      	bhi.n	80041ee <HAL_RCC_OscConfig+0x35e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d108      	bne.n	80041d8 <HAL_RCC_OscConfig+0x348>
 80041c6:	4b70      	ldr	r3, [pc, #448]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80041ce:	4a6e      	ldr	r2, [pc, #440]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80041d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041d6:	e075      	b.n	80042c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041d8:	4b6b      	ldr	r3, [pc, #428]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	069b      	lsls	r3, r3, #26
 80041e6:	4968      	ldr	r1, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ec:	e06a      	b.n	80042c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ee:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	4962      	ldr	r1, [pc, #392]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004202:	e05f      	b.n	80042c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d042      	beq.n	8004292 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800420c:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a5d      	ldr	r2, [pc, #372]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd f9b4 	bl	8001584 <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004220:	f7fd f9b0 	bl	8001584 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e255      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004232:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800423e:	f7fd f9d1 	bl	80015e4 <HAL_GetREVID>
 8004242:	4603      	mov	r3, r0
 8004244:	f241 0203 	movw	r2, #4099	; 0x1003
 8004248:	4293      	cmp	r3, r2
 800424a:	d817      	bhi.n	800427c <HAL_RCC_OscConfig+0x3ec>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	2b20      	cmp	r3, #32
 8004252:	d108      	bne.n	8004266 <HAL_RCC_OscConfig+0x3d6>
 8004254:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800425c:	4a4a      	ldr	r2, [pc, #296]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800425e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004262:	6053      	str	r3, [r2, #4]
 8004264:	e02e      	b.n	80042c4 <HAL_RCC_OscConfig+0x434>
 8004266:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	069b      	lsls	r3, r3, #26
 8004274:	4944      	ldr	r1, [pc, #272]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
 800427a:	e023      	b.n	80042c4 <HAL_RCC_OscConfig+0x434>
 800427c:	4b42      	ldr	r3, [pc, #264]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	493f      	ldr	r1, [pc, #252]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	60cb      	str	r3, [r1, #12]
 8004290:	e018      	b.n	80042c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004292:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a3c      	ldr	r2, [pc, #240]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd f971 	bl	8001584 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042a6:	f7fd f96d 	bl	8001584 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e212      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042b8:	4b33      	ldr	r3, [pc, #204]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d036      	beq.n	800433e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d019      	beq.n	800430c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd f94e 	bl	8001584 <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd f94a 	bl	8001584 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e1ef      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x45c>
 800430a:	e018      	b.n	800433e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fd f934 	bl	8001584 <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004320:	f7fd f930 	bl	8001584 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1d5      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d039      	beq.n	80043be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01c      	beq.n	800438c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 8004358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800435c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800435e:	f7fd f911 	bl	8001584 <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004366:	f7fd f90d 	bl	8001584 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e1b2      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_RCC_OscConfig+0x4f8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x4d6>
 8004384:	e01b      	b.n	80043be <HAL_RCC_OscConfig+0x52e>
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800438c:	4b9b      	ldr	r3, [pc, #620]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a9a      	ldr	r2, [pc, #616]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004396:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004398:	f7fd f8f4 	bl	8001584 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043a0:	f7fd f8f0 	bl	8001584 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e195      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043b2:	4b92      	ldr	r3, [pc, #584]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8081 	beq.w	80044ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043cc:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <HAL_RCC_OscConfig+0x770>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a8b      	ldr	r2, [pc, #556]	; (8004600 <HAL_RCC_OscConfig+0x770>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d8:	f7fd f8d4 	bl	8001584 <HAL_GetTick>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7fd f8d0 	bl	8001584 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e175      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f2:	4b83      	ldr	r3, [pc, #524]	; (8004600 <HAL_RCC_OscConfig+0x770>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d106      	bne.n	8004414 <HAL_RCC_OscConfig+0x584>
 8004406:	4b7d      	ldr	r3, [pc, #500]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a7c      	ldr	r2, [pc, #496]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
 8004412:	e02d      	b.n	8004470 <HAL_RCC_OscConfig+0x5e0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10c      	bne.n	8004436 <HAL_RCC_OscConfig+0x5a6>
 800441c:	4b77      	ldr	r3, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	4a76      	ldr	r2, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	6713      	str	r3, [r2, #112]	; 0x70
 8004428:	4b74      	ldr	r3, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	4a73      	ldr	r2, [pc, #460]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800442e:	f023 0304 	bic.w	r3, r3, #4
 8004432:	6713      	str	r3, [r2, #112]	; 0x70
 8004434:	e01c      	b.n	8004470 <HAL_RCC_OscConfig+0x5e0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c8>
 800443e:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	4b6c      	ldr	r3, [pc, #432]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a6b      	ldr	r2, [pc, #428]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e00b      	b.n	8004470 <HAL_RCC_OscConfig+0x5e0>
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	4a67      	ldr	r2, [pc, #412]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	6713      	str	r3, [r2, #112]	; 0x70
 8004464:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a64      	ldr	r2, [pc, #400]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800446a:	f023 0304 	bic.w	r3, r3, #4
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fd f884 	bl	8001584 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fd f880 	bl	8001584 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e123      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004496:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ee      	beq.n	8004480 <HAL_RCC_OscConfig+0x5f0>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fd f86e 	bl	8001584 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd f86a 	bl	8001584 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e10d      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044c2:	4b4e      	ldr	r3, [pc, #312]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ee      	bne.n	80044ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8102 	beq.w	80046dc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044d8:	4b48      	ldr	r3, [pc, #288]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e0:	2b18      	cmp	r3, #24
 80044e2:	f000 80bd 	beq.w	8004660 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	f040 809e 	bne.w	800462c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f0:	4b42      	ldr	r3, [pc, #264]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a41      	ldr	r2, [pc, #260]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd f842 	bl	8001584 <HAL_GetTick>
 8004500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004504:	f7fd f83e 	bl	8001584 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0e3      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004516:	4b39      	ldr	r3, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_RCC_OscConfig+0x774>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	430a      	orrs	r2, r1
 8004536:	4931      	ldr	r1, [pc, #196]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004538:	4313      	orrs	r3, r2
 800453a:	628b      	str	r3, [r1, #40]	; 0x28
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	3b01      	subs	r3, #1
 8004542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	3b01      	subs	r3, #1
 800454c:	025b      	lsls	r3, r3, #9
 800454e:	b29b      	uxth	r3, r3
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	3b01      	subs	r3, #1
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	3b01      	subs	r3, #1
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800456c:	4923      	ldr	r1, [pc, #140]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800457e:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004582:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_RCC_OscConfig+0x778>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800458a:	00d2      	lsls	r2, r2, #3
 800458c:	491b      	ldr	r1, [pc, #108]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f023 020c 	bic.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4917      	ldr	r1, [pc, #92]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045a4:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f023 0202 	bic.w	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	4912      	ldr	r1, [pc, #72]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_RCC_OscConfig+0x76c>)
 80045ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fc ffc7 	bl	8001584 <HAL_GetTick>
 80045f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045f8:	e011      	b.n	800461e <HAL_RCC_OscConfig+0x78e>
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
 8004600:	58024800 	.word	0x58024800
 8004604:	fffffc0c 	.word	0xfffffc0c
 8004608:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fc ffba 	bl	8001584 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e05f      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800461e:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <HAL_RCC_OscConfig+0x858>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x77c>
 800462a:	e057      	b.n	80046dc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462c:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <HAL_RCC_OscConfig+0x858>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2d      	ldr	r2, [pc, #180]	; (80046e8 <HAL_RCC_OscConfig+0x858>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fc ffa4 	bl	8001584 <HAL_GetTick>
 800463c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004640:	f7fc ffa0 	bl	8001584 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e045      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <HAL_RCC_OscConfig+0x858>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x7b0>
 800465e:	e03d      	b.n	80046dc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCC_OscConfig+0x858>)
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_RCC_OscConfig+0x858>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b01      	cmp	r3, #1
 8004672:	d031      	beq.n	80046d8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f003 0203 	and.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d12a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d122      	bne.n	80046d8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d11a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d111      	bne.n	80046d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d108      	bne.n	80046d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0e1b      	lsrs	r3, r3, #24
 80046ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3730      	adds	r7, #48	; 0x30
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400

080046ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e19c      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b8a      	ldr	r3, [pc, #552]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d910      	bls.n	8004730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b87      	ldr	r3, [pc, #540]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 020f 	bic.w	r2, r3, #15
 8004716:	4985      	ldr	r1, [pc, #532]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b83      	ldr	r3, [pc, #524]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e184      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	4b7b      	ldr	r3, [pc, #492]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004748:	429a      	cmp	r2, r3
 800474a:	d908      	bls.n	800475e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800474c:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	4975      	ldr	r1, [pc, #468]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800475a:	4313      	orrs	r3, r2
 800475c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695a      	ldr	r2, [r3, #20]
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004776:	429a      	cmp	r2, r3
 8004778:	d908      	bls.n	800478c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800477a:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	496a      	ldr	r1, [pc, #424]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004788:	4313      	orrs	r3, r2
 800478a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d908      	bls.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047a8:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	495e      	ldr	r1, [pc, #376]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d908      	bls.n	80047e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047d6:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4953      	ldr	r1, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	429a      	cmp	r2, r3
 8004802:	d908      	bls.n	8004816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f023 020f 	bic.w	r2, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4947      	ldr	r1, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004812:	4313      	orrs	r3, r2
 8004814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d055      	beq.n	80048ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004822:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	4940      	ldr	r1, [pc, #256]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004830:	4313      	orrs	r3, r2
 8004832:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d107      	bne.n	800484c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800483c:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d121      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0f6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d115      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0ea      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0de      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487c:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0d6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800488c:	4b28      	ldr	r3, [pc, #160]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f023 0207 	bic.w	r2, r3, #7
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4925      	ldr	r1, [pc, #148]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 800489a:	4313      	orrs	r3, r2
 800489c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fc fe71 	bl	8001584 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a4:	e00a      	b.n	80048bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a6:	f7fc fe6d 	bl	8001584 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0be      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d1eb      	bne.n	80048a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d208      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ea:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f023 020f 	bic.w	r2, r3, #15
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x244>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d214      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 020f 	bic.w	r2, r3, #15
 8004912:	4906      	ldr	r1, [pc, #24]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <HAL_RCC_ClockConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e086      	b.n	8004a3a <HAL_RCC_ClockConfig+0x34e>
 800492c:	52002000 	.word	0x52002000
 8004930:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800494c:	429a      	cmp	r2, r3
 800494e:	d208      	bcs.n	8004962 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004950:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4939      	ldr	r1, [pc, #228]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 800495e:	4313      	orrs	r3, r2
 8004960:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497a:	429a      	cmp	r2, r3
 800497c:	d208      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	492e      	ldr	r1, [pc, #184]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 800498c:	4313      	orrs	r3, r2
 800498e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d208      	bcs.n	80049be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	4922      	ldr	r1, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d208      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049da:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4917      	ldr	r1, [pc, #92]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049ec:	f000 f834 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	4912      	ldr	r1, [pc, #72]	; (8004a48 <HAL_RCC_ClockConfig+0x35c>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x358>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <HAL_RCC_ClockConfig+0x35c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x360>)
 8004a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x364>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x368>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fd5e 	bl	80014f0 <HAL_InitTick>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	08009548 	.word	0x08009548
 8004a4c:	24000004 	.word	0x24000004
 8004a50:	24000000 	.word	0x24000000
 8004a54:	2400000c 	.word	0x2400000c

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5e:	4bb3      	ldr	r3, [pc, #716]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a66:	2b18      	cmp	r3, #24
 8004a68:	f200 8155 	bhi.w	8004d16 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004ad9 	.word	0x08004ad9
 8004a78:	08004d17 	.word	0x08004d17
 8004a7c:	08004d17 	.word	0x08004d17
 8004a80:	08004d17 	.word	0x08004d17
 8004a84:	08004d17 	.word	0x08004d17
 8004a88:	08004d17 	.word	0x08004d17
 8004a8c:	08004d17 	.word	0x08004d17
 8004a90:	08004d17 	.word	0x08004d17
 8004a94:	08004aff 	.word	0x08004aff
 8004a98:	08004d17 	.word	0x08004d17
 8004a9c:	08004d17 	.word	0x08004d17
 8004aa0:	08004d17 	.word	0x08004d17
 8004aa4:	08004d17 	.word	0x08004d17
 8004aa8:	08004d17 	.word	0x08004d17
 8004aac:	08004d17 	.word	0x08004d17
 8004ab0:	08004d17 	.word	0x08004d17
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004d17 	.word	0x08004d17
 8004abc:	08004d17 	.word	0x08004d17
 8004ac0:	08004d17 	.word	0x08004d17
 8004ac4:	08004d17 	.word	0x08004d17
 8004ac8:	08004d17 	.word	0x08004d17
 8004acc:	08004d17 	.word	0x08004d17
 8004ad0:	08004d17 	.word	0x08004d17
 8004ad4:	08004b0b 	.word	0x08004b0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad8:	4b94      	ldr	r3, [pc, #592]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ae4:	4b91      	ldr	r3, [pc, #580]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	4a90      	ldr	r2, [pc, #576]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004af6:	e111      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004af8:	4b8d      	ldr	r3, [pc, #564]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004afa:	61bb      	str	r3, [r7, #24]
    break;
 8004afc:	e10e      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004afe:	4b8d      	ldr	r3, [pc, #564]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b00:	61bb      	str	r3, [r7, #24]
    break;
 8004b02:	e10b      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b04:	4b8c      	ldr	r3, [pc, #560]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b06:	61bb      	str	r3, [r7, #24]
    break;
 8004b08:	e108      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b0a:	4b88      	ldr	r3, [pc, #544]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b14:	4b85      	ldr	r3, [pc, #532]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b20:	4b82      	ldr	r3, [pc, #520]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b2a:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	08db      	lsrs	r3, r3, #3
 8004b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80e1 	beq.w	8004d10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	f000 8083 	beq.w	8004c5c <HAL_RCC_GetSysClockFreq+0x204>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	f200 80a1 	bhi.w	8004ca0 <HAL_RCC_GetSysClockFreq+0x248>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x114>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d056      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b6a:	e099      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02d      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b78:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	4a6b      	ldr	r2, [pc, #428]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b62      	ldr	r3, [pc, #392]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004bd2:	e087      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004d40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c16:	e065      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5a:	e043      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004d48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c9e:	e021      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cee:	3301      	adds	r3, #1
 8004cf0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d08:	ee17 3a90 	vmov	r3, s15
 8004d0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d0e:	e005      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d18:	61bb      	str	r3, [r7, #24]
    break;
 8004d1a:	bf00      	nop
  }

  return sysclockfreq;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	; 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	03d09000 	.word	0x03d09000
 8004d34:	003d0900 	.word	0x003d0900
 8004d38:	007a1200 	.word	0x007a1200
 8004d3c:	46000000 	.word	0x46000000
 8004d40:	4c742400 	.word	0x4c742400
 8004d44:	4a742400 	.word	0x4a742400
 8004d48:	4af42400 	.word	0x4af42400

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d52:	f7ff fe81 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	490f      	ldr	r1, [pc, #60]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d64:	5ccb      	ldrb	r3, [r1, r3]
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	fa22 f303 	lsr.w	r3, r2, r3
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	08009548 	.word	0x08009548
 8004da4:	24000004 	.word	0x24000004
 8004da8:	24000000 	.word	0x24000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004db0:	f7ff ffcc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	08009548 	.word	0x08009548

08004dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ddc:	f7ff ffb6 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	4904      	ldr	r1, [pc, #16]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	08009548 	.word	0x08009548

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d03f      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e28:	d02a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e2e:	d824      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e34:	d018      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e3a:	d81e      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e44:	d007      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e46:	e018      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e48:	4ba3      	ldr	r3, [pc, #652]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4aa2      	ldr	r2, [pc, #648]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e54:	e015      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fff9 	bl	8006e54 <RCCEx_PLL2_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e66:	e00c      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3324      	adds	r3, #36	; 0x24
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f002 f8a2 	bl	8006fb8 <RCCEx_PLL3_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e78:	e003      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e88:	4b93      	ldr	r3, [pc, #588]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e94:	4990      	ldr	r1, [pc, #576]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	650b      	str	r3, [r1, #80]	; 0x50
 8004e9a:	e001      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d03d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d826      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ed1 	.word	0x08004ed1
 8004ec0:	08004edf 	.word	0x08004edf
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004f09 	.word	0x08004f09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed0:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4a80      	ldr	r2, [pc, #512]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004edc:	e015      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 ffb5 	bl	8006e54 <RCCEx_PLL2_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eee:	e00c      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3324      	adds	r3, #36	; 0x24
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f002 f85e 	bl	8006fb8 <RCCEx_PLL3_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f10:	4b71      	ldr	r3, [pc, #452]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f023 0207 	bic.w	r2, r3, #7
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	496e      	ldr	r1, [pc, #440]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	650b      	str	r3, [r1, #80]	; 0x50
 8004f22:	e001      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d042      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3c:	d02b      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f42:	d825      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f44:	2bc0      	cmp	r3, #192	; 0xc0
 8004f46:	d028      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f48:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4a:	d821      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d016      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d81d      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d007      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004f5c:	e018      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f5e:	4b5e      	ldr	r3, [pc, #376]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	4a5d      	ldr	r2, [pc, #372]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f6a:	e017      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 ff6e 	bl	8006e54 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f7c:	e00e      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f002 f817 	bl	8006fb8 <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e005      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fa2:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	494a      	ldr	r1, [pc, #296]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	650b      	str	r3, [r1, #80]	; 0x50
 8004fb4:	e001      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d049      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd0:	d030      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd6:	d82a      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fdc:	d02c      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004fde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fe2:	d824      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d018      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d81e      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff8:	d007      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ffa:	e018      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffc:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a35      	ldr	r2, [pc, #212]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005008:	e017      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 ff1f 	bl	8006e54 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800501a:	e00e      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f001 ffc8 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800502c:	e005      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
      break;
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800504e:	4922      	ldr	r1, [pc, #136]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	658b      	str	r3, [r1, #88]	; 0x58
 8005054:	e001      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005062:	2b00      	cmp	r3, #0
 8005064:	d04b      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800506c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005070:	d030      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005076:	d82a      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005078:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800507c:	d02e      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800507e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005082:	d824      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005088:	d018      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800508a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508e:	d81e      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005098:	d007      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800509a:	e018      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a0d      	ldr	r2, [pc, #52]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050a8:	e019      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fecf 	bl	8006e54 <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050ba:	e010      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 ff78 	bl	8006fb8 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050cc:	e007      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
      break;
 80050d2:	e004      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80050d8:	58024400 	.word	0x58024400
      break;
 80050dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050e4:	4b99      	ldr	r3, [pc, #612]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050f2:	4996      	ldr	r1, [pc, #600]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	658b      	str	r3, [r1, #88]	; 0x58
 80050f8:	e001      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d032      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510e:	2b30      	cmp	r3, #48	; 0x30
 8005110:	d01c      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005112:	2b30      	cmp	r3, #48	; 0x30
 8005114:	d817      	bhi.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005116:	2b20      	cmp	r3, #32
 8005118:	d00c      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800511a:	2b20      	cmp	r3, #32
 800511c:	d813      	bhi.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005122:	2b10      	cmp	r3, #16
 8005124:	d10f      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005126:	4b89      	ldr	r3, [pc, #548]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	4a88      	ldr	r2, [pc, #544]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800512c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005132:	e00e      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	2102      	movs	r1, #2
 800513a:	4618      	mov	r0, r3
 800513c:	f001 fe8a 	bl	8006e54 <RCCEx_PLL2_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005144:	e005      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
      break;
 800514a:	e002      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005158:	4b7c      	ldr	r3, [pc, #496]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	4979      	ldr	r1, [pc, #484]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005166:	4313      	orrs	r3, r2
 8005168:	64cb      	str	r3, [r1, #76]	; 0x4c
 800516a:	e001      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d047      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005184:	d030      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518a:	d82a      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800518c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005190:	d02c      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005196:	d824      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519c:	d018      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a2:	d81e      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d007      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80051ae:	e018      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b0:	4b66      	ldr	r3, [pc, #408]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a65      	ldr	r2, [pc, #404]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051bc:	e017      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 fe45 	bl	8006e54 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051ce:	e00e      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 feee 	bl	8006fb8 <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051e0:	e005      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	e002      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80051ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051f4:	4b55      	ldr	r3, [pc, #340]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005200:	4952      	ldr	r1, [pc, #328]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005202:	4313      	orrs	r3, r2
 8005204:	650b      	str	r3, [r1, #80]	; 0x50
 8005206:	e001      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d049      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005220:	d02e      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005226:	d828      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800522c:	d02a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800522e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005232:	d822      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005238:	d026      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800523a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800523e:	d81c      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005244:	d010      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524a:	d816      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01d      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d111      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fdf9 	bl	8006e54 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005266:	e012      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f001 fea2 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005278:	e009      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
      break;
 800527e:	e006      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005280:	bf00      	nop
 8005282:	e004      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005284:	bf00      	nop
 8005286:	e002      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800528c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005294:	4b2d      	ldr	r3, [pc, #180]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a0:	492a      	ldr	r1, [pc, #168]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	650b      	str	r3, [r1, #80]	; 0x50
 80052a6:	e001      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d04d      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c2:	d02e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80052c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c8:	d828      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d02a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d822      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80052d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052da:	d026      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80052dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e0:	d81c      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80052e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e6:	d010      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80052e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ec:	d816      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01d      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f6:	d111      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 fda8 	bl	8006e54 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005308:	e012      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fe51 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800531a:	e009      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800532e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005344:	4901      	ldr	r1, [pc, #4]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005346:	4313      	orrs	r3, r2
 8005348:	658b      	str	r3, [r1, #88]	; 0x58
 800534a:	e003      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800534c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02f      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005368:	d00e      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800536a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536e:	d814      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005378:	d10f      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537a:	4baf      	ldr	r3, [pc, #700]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	4aae      	ldr	r2, [pc, #696]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005386:	e00c      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f001 fd60 	bl	8006e54 <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005398:	e003      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	e000      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80053a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053a8:	4ba3      	ldr	r3, [pc, #652]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	49a0      	ldr	r1, [pc, #640]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	650b      	str	r3, [r1, #80]	; 0x50
 80053ba:	e001      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d032      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d81b      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	08005413 	.word	0x08005413
 80053e0:	080053ed 	.word	0x080053ed
 80053e4:	080053fb 	.word	0x080053fb
 80053e8:	08005413 	.word	0x08005413
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4b92      	ldr	r3, [pc, #584]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4a91      	ldr	r2, [pc, #580]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053f8:	e00c      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fd27 	bl	8006e54 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
      break;
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800541a:	4b87      	ldr	r3, [pc, #540]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	4984      	ldr	r1, [pc, #528]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005428:	4313      	orrs	r3, r2
 800542a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800542c:	e001      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8086 	beq.w	800554c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005440:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a7d      	ldr	r2, [pc, #500]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544c:	f7fc f89a 	bl	8001584 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005452:	e009      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fc f896 	bl	8001584 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d902      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	75fb      	strb	r3, [r7, #23]
        break;
 8005466:	e005      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005468:	4b74      	ldr	r3, [pc, #464]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ef      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d166      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800547a:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800547c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005484:	4053      	eors	r3, r2
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800548e:	4b6a      	ldr	r3, [pc, #424]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005498:	4b67      	ldr	r3, [pc, #412]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a66      	ldr	r2, [pc, #408]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800549e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a4:	4b64      	ldr	r3, [pc, #400]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a63      	ldr	r2, [pc, #396]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054b0:	4a61      	ldr	r2, [pc, #388]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d115      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc f85f 	bl	8001584 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c8:	e00b      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc f85b 	bl	8001584 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	75fb      	strb	r3, [r7, #23]
            break;
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054e2:	4b55      	ldr	r3, [pc, #340]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ed      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d126      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d10d      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005504:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005512:	0919      	lsrs	r1, r3, #4
 8005514:	4b4a      	ldr	r3, [pc, #296]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005516:	400b      	ands	r3, r1
 8005518:	4947      	ldr	r1, [pc, #284]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005520:	4b45      	ldr	r3, [pc, #276]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	4a44      	ldr	r2, [pc, #272]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005526:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800552a:	6113      	str	r3, [r2, #16]
 800552c:	4b42      	ldr	r3, [pc, #264]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800552e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	493f      	ldr	r1, [pc, #252]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800553c:	4313      	orrs	r3, r2
 800553e:	670b      	str	r3, [r1, #112]	; 0x70
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	75bb      	strb	r3, [r7, #22]
 8005546:	e001      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8085 	beq.w	8005664 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555e:	2b28      	cmp	r3, #40	; 0x28
 8005560:	d866      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005645 	.word	0x08005645
 800556c:	08005631 	.word	0x08005631
 8005570:	08005631 	.word	0x08005631
 8005574:	08005631 	.word	0x08005631
 8005578:	08005631 	.word	0x08005631
 800557c:	08005631 	.word	0x08005631
 8005580:	08005631 	.word	0x08005631
 8005584:	08005631 	.word	0x08005631
 8005588:	0800560d 	.word	0x0800560d
 800558c:	08005631 	.word	0x08005631
 8005590:	08005631 	.word	0x08005631
 8005594:	08005631 	.word	0x08005631
 8005598:	08005631 	.word	0x08005631
 800559c:	08005631 	.word	0x08005631
 80055a0:	08005631 	.word	0x08005631
 80055a4:	08005631 	.word	0x08005631
 80055a8:	0800561f 	.word	0x0800561f
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005631 	.word	0x08005631
 80055b4:	08005631 	.word	0x08005631
 80055b8:	08005631 	.word	0x08005631
 80055bc:	08005631 	.word	0x08005631
 80055c0:	08005631 	.word	0x08005631
 80055c4:	08005631 	.word	0x08005631
 80055c8:	08005645 	.word	0x08005645
 80055cc:	08005631 	.word	0x08005631
 80055d0:	08005631 	.word	0x08005631
 80055d4:	08005631 	.word	0x08005631
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005631 	.word	0x08005631
 80055e0:	08005631 	.word	0x08005631
 80055e4:	08005631 	.word	0x08005631
 80055e8:	08005645 	.word	0x08005645
 80055ec:	08005631 	.word	0x08005631
 80055f0:	08005631 	.word	0x08005631
 80055f4:	08005631 	.word	0x08005631
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005631 	.word	0x08005631
 8005604:	08005631 	.word	0x08005631
 8005608:	08005645 	.word	0x08005645
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fc1e 	bl	8006e54 <RCCEx_PLL2_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800561c:	e013      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	2101      	movs	r1, #1
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fcc7 	bl	8006fb8 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800562e:	e00a      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e007      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
 800563c:	58024800 	.word	0x58024800
 8005640:	00ffffcf 	.word	0x00ffffcf
      break;
 8005644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800564c:	4b96      	ldr	r3, [pc, #600]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005658:	4993      	ldr	r1, [pc, #588]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	654b      	str	r3, [r1, #84]	; 0x54
 800565e:	e001      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d038      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	2b05      	cmp	r3, #5
 8005676:	d821      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056c3 	.word	0x080056c3
 8005684:	08005699 	.word	0x08005699
 8005688:	080056ab 	.word	0x080056ab
 800568c:	080056c3 	.word	0x080056c3
 8005690:	080056c3 	.word	0x080056c3
 8005694:	080056c3 	.word	0x080056c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fbd8 	bl	8006e54 <RCCEx_PLL2_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056a8:	e00c      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3324      	adds	r3, #36	; 0x24
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 fc81 	bl	8006fb8 <RCCEx_PLL3_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056ba:	e003      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
      break;
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80056c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056ca:	4b77      	ldr	r3, [pc, #476]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	f023 0207 	bic.w	r2, r3, #7
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	4974      	ldr	r1, [pc, #464]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	654b      	str	r3, [r1, #84]	; 0x54
 80056dc:	e001      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d821      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005743 	.word	0x08005743
 8005704:	08005719 	.word	0x08005719
 8005708:	0800572b 	.word	0x0800572b
 800570c:	08005743 	.word	0x08005743
 8005710:	08005743 	.word	0x08005743
 8005714:	08005743 	.word	0x08005743
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	2101      	movs	r1, #1
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fb98 	bl	8006e54 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005728:	e00c      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2101      	movs	r1, #1
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fc41 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800573a:	e003      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	e000      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800574a:	4b57      	ldr	r3, [pc, #348]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	f023 0207 	bic.w	r2, r3, #7
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	4953      	ldr	r1, [pc, #332]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	658b      	str	r3, [r1, #88]	; 0x58
 800575e:	e001      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d04b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800577a:	d02e      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800577c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005780:	d828      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d02a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d822      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800578e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005792:	d026      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005794:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005798:	d81c      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800579a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579e:	d010      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d816      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80057aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ae:	d111      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 fb4c 	bl	8006e54 <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057c0:	e012      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3324      	adds	r3, #36	; 0x24
 80057c6:	2102      	movs	r1, #2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 fbf5 	bl	8006fb8 <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057d2:	e009      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	75fb      	strb	r3, [r7, #23]
      break;
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80057da:	bf00      	nop
 80057dc:	e004      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80057de:	bf00      	nop
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80057e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fc:	492a      	ldr	r1, [pc, #168]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	654b      	str	r3, [r1, #84]	; 0x54
 8005802:	e001      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d04d      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800581a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800581e:	d02e      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005820:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005824:	d828      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d02a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005830:	d822      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005836:	d026      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800583c:	d81c      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d010      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005848:	d816      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01d      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d111      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fafa 	bl	8006e54 <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005864:	e012      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3324      	adds	r3, #36	; 0x24
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fba3 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005876:	e009      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
      break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800588a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a0:	4901      	ldr	r1, [pc, #4]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	658b      	str	r3, [r1, #88]	; 0x58
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80058a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d04b      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058c6:	d02e      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80058c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058cc:	d828      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	d02a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80058d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d8:	d822      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80058da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058de:	d026      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80058e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058e4:	d81c      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80058e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ea:	d010      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80058ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f0:	d816      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01d      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fa:	d111      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f001 faa6 	bl	8006e54 <RCCEx_PLL2_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800590c:	e012      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3324      	adds	r3, #36	; 0x24
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fb4f 	bl	8006fb8 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800591e:	e009      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
      break;
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005934:	7dfb      	ldrb	r3, [r7, #23]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800593a:	4b9d      	ldr	r3, [pc, #628]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005948:	4999      	ldr	r1, [pc, #612]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800594a:	4313      	orrs	r3, r2
 800594c:	658b      	str	r3, [r1, #88]	; 0x58
 800594e:	e001      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	d10a      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	2102      	movs	r1, #2
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fb20 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005982:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	4987      	ldr	r1, [pc, #540]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005992:	4313      	orrs	r3, r2
 8005994:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ac:	d10a      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3324      	adds	r3, #36	; 0x24
 80059b2:	2102      	movs	r1, #2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 faff 	bl	8006fb8 <RCCEx_PLL3_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059c4:	4b7a      	ldr	r3, [pc, #488]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d2:	4977      	ldr	r1, [pc, #476]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d034      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ee:	d01d      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059f4:	d817      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80059fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fe:	d009      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005a00:	e011      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 fa23 	bl	8006e54 <RCCEx_PLL2_Config>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a12:	e00c      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3324      	adds	r3, #36	; 0x24
 8005a18:	2102      	movs	r1, #2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 facc 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
      break;
 8005a2a:	e000      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a34:	4b5e      	ldr	r3, [pc, #376]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a42:	495b      	ldr	r1, [pc, #364]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	658b      	str	r3, [r1, #88]	; 0x58
 8005a48:	e001      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d033      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a64:	d01c      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005a66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a6a:	d816      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a76:	d007      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7a:	4b4d      	ldr	r3, [pc, #308]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	4a4c      	ldr	r2, [pc, #304]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a86:	e00c      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3324      	adds	r3, #36	; 0x24
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 fa92 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a98:	e003      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aa8:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab6:	493e      	ldr	r1, [pc, #248]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	654b      	str	r3, [r1, #84]	; 0x54
 8005abc:	e001      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d029      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ada:	d007      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005adc:	e00f      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a33      	ldr	r2, [pc, #204]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005aea:	e00b      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	2102      	movs	r1, #2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 f9ae 	bl	8006e54 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
      break;
 8005b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b0a:	4b29      	ldr	r3, [pc, #164]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	4926      	ldr	r1, [pc, #152]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b1c:	e001      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3324      	adds	r3, #36	; 0x24
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fa3f 	bl	8006fb8 <RCCEx_PLL3_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d033      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d017      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5e:	d811      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d013      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6a:	d80b      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d010      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b82:	e007      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
      break;
 8005b88:	e004      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba6:	4902      	ldr	r1, [pc, #8]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	654b      	str	r3, [r1, #84]	; 0x54
 8005bac:	e004      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bc4:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	492e      	ldr	r1, [pc, #184]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005be2:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bf0:	4926      	ldr	r1, [pc, #152]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c02:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c0e:	491f      	ldr	r1, [pc, #124]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c2a:	6113      	str	r3, [r2, #16]
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c36:	4915      	ldr	r1, [pc, #84]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da08      	bge.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c50:	490e      	ldr	r1, [pc, #56]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	4906      	ldr	r1, [pc, #24]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005c76:	7dbb      	ldrb	r3, [r7, #22]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	58024400 	.word	0x58024400

08005c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b090      	sub	sp, #64	; 0x40
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9e:	f040 8095 	bne.w	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005ca2:	4b97      	ldr	r3, [pc, #604]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	f200 8088 	bhi.w	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cd1 	.word	0x08005cd1
 8005cc0:	08005cf9 	.word	0x08005cf9
 8005cc4:	08005d21 	.word	0x08005d21
 8005cc8:	08005dbd 	.word	0x08005dbd
 8005ccc:	08005d49 	.word	0x08005d49
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cd0:	4b8b      	ldr	r3, [pc, #556]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cdc:	d108      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff64 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cec:	f000 bc94 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cf4:	f000 bc90 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cf8:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d04:	d108      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d06:	f107 0318 	add.w	r3, r7, #24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fca8 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d14:	f000 bc80 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d1c:	f000 bc7c 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d20:	4b77      	ldr	r3, [pc, #476]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fde8 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d3c:	f000 bc6c 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d44:	f000 bc68 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d48:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d52:	4b6b      	ldr	r3, [pc, #428]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d64:	4b66      	ldr	r3, [pc, #408]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a65      	ldr	r2, [pc, #404]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d76:	e01f      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d84:	d106      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8c:	d102      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d8e:	4b5e      	ldr	r3, [pc, #376]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d92:	e011      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d94:	4b5a      	ldr	r3, [pc, #360]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da0:	d106      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da8:	d102      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005daa:	4b58      	ldr	r3, [pc, #352]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005db4:	f000 bc30 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005db8:	f000 bc2e 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dbc:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc0:	f000 bc2a 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc8:	f000 bc26 	b.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd2:	f040 809f 	bne.w	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005dde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d04d      	beq.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	f200 8084 	bhi.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2bc0      	cmp	r3, #192	; 0xc0
 8005df6:	d07d      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8005dfc:	d87d      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2b80      	cmp	r3, #128	; 0x80
 8005e02:	d02d      	beq.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d877      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d012      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005e16:	e070      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e18:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e24:	d107      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fec0 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e34:	e3f0      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3a:	e3ed      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e3c:	4b30      	ldr	r3, [pc, #192]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e48:	d107      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4a:	f107 0318 	add.w	r3, r7, #24
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc06 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e58:	e3de      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e5e:	e3db      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e6e:	f107 030c 	add.w	r3, r7, #12
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fd48 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e7c:	e3cc      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e82:	e3c9      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e84:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e8e:	4b1c      	ldr	r3, [pc, #112]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ea0:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb2:	e01e      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eb4:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec0:	d106      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec8:	d102      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ece:	e010      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005edc:	d106      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee4:	d102      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eea:	e002      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ef0:	e392      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005ef2:	e391      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ef8:	e38e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005efe:	e38b      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f00:	58024400 	.word	0x58024400
 8005f04:	03d09000 	.word	0x03d09000
 8005f08:	003d0900 	.word	0x003d0900
 8005f0c:	007a1200 	.word	0x007a1200
 8005f10:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1a:	f040 809c 	bne.w	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005f1e:	4b9d      	ldr	r3, [pc, #628]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f2e:	d054      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f36:	f200 808b 	bhi.w	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f40:	f000 8083 	beq.w	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f4a:	f200 8081 	bhi.w	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f54:	d02f      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5c:	d878      	bhi.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d004      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6a:	d012      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005f6c:	e070      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f6e:	4b89      	ldr	r3, [pc, #548]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fe15 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f8a:	e345      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f90:	e342      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f92:	4b80      	ldr	r3, [pc, #512]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa0:	f107 0318 	add.w	r3, r7, #24
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb5b 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005fae:	e333      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb4:	e330      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fb6:	4b77      	ldr	r3, [pc, #476]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fc9d 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005fd2:	e321      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fd8:	e31e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005fda:	4b6e      	ldr	r3, [pc, #440]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fe4:	4b6b      	ldr	r3, [pc, #428]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d10c      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ff6:	4b67      	ldr	r3, [pc, #412]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	08db      	lsrs	r3, r3, #3
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	4a65      	ldr	r2, [pc, #404]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006008:	e01e      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800600a:	4b62      	ldr	r3, [pc, #392]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006016:	d106      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601e:	d102      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006024:	e010      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006026:	4b5b      	ldr	r3, [pc, #364]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006032:	d106      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800603a:	d102      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800603c:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	e002      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006046:	e2e7      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006048:	e2e6      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800604a:	4b56      	ldr	r3, [pc, #344]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800604e:	e2e3      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006054:	e2e0      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605c:	f040 80a7 	bne.w	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006060:	4b4c      	ldr	r3, [pc, #304]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006068:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006070:	d055      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006078:	f200 8096 	bhi.w	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006082:	f000 8084 	beq.w	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800608c:	f200 808c 	bhi.w	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006096:	d030      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800609e:	f200 8083 	bhi.w	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ae:	d012      	beq.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80060b0:	e07a      	b.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060b2:	4b38      	ldr	r3, [pc, #224]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060be:	d107      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fd73 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060ce:	e2a3      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d4:	e2a0      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e2:	d107      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e4:	f107 0318 	add.w	r3, r7, #24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fab9 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80060f2:	e291      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060f8:	e28e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060fa:	4b26      	ldr	r3, [pc, #152]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006106:	d107      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006108:	f107 030c 	add.w	r3, r7, #12
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fbfb 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006116:	e27f      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800611c:	e27c      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800611e:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006126:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006128:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b04      	cmp	r3, #4
 8006132:	d10c      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	4a14      	ldr	r2, [pc, #80]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800614c:	e01e      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615a:	d106      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006162:	d102      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006168:	e010      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006176:	d106      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617e:	d102      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006184:	e002      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800618a:	e245      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800618c:	e244      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006192:	e241      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006194:	58024400 	.word	0x58024400
 8006198:	03d09000 	.word	0x03d09000
 800619c:	003d0900 	.word	0x003d0900
 80061a0:	007a1200 	.word	0x007a1200
 80061a4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ac:	e234      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b4:	f040 809c 	bne.w	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80061b8:	4b9b      	ldr	r3, [pc, #620]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80061ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80061c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c8:	d054      	beq.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061d0:	f200 808b 	bhi.w	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061da:	f000 8083 	beq.w	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061e4:	f200 8081 	bhi.w	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ee:	d02f      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f6:	d878      	bhi.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006204:	d012      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006206:	e070      	b.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006208:	4b87      	ldr	r3, [pc, #540]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006214:	d107      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fcc8 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006224:	e1f8      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800622a:	e1f5      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800622c:	4b7e      	ldr	r3, [pc, #504]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006238:	d107      	bne.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623a:	f107 0318 	add.w	r3, r7, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fa0e 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006248:	e1e6      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800624e:	e1e3      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006250:	4b75      	ldr	r3, [pc, #468]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625c:	d107      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800625e:	f107 030c 	add.w	r3, r7, #12
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fb50 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800626c:	e1d4      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006272:	e1d1      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006274:	4b6c      	ldr	r3, [pc, #432]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800627c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800627e:	4b6a      	ldr	r3, [pc, #424]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b04      	cmp	r3, #4
 8006288:	d10c      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006290:	4b65      	ldr	r3, [pc, #404]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	4a64      	ldr	r2, [pc, #400]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a2:	e01e      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062a4:	4b60      	ldr	r3, [pc, #384]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b0:	d106      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062b8:	d102      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80062ba:	4b5d      	ldr	r3, [pc, #372]	; (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062be:	e010      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062c0:	4b59      	ldr	r3, [pc, #356]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062cc:	d106      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d4:	d102      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80062d6:	4b57      	ldr	r3, [pc, #348]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80062d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062da:	e002      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80062e0:	e19a      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80062e2:	e199      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80062e4:	4b54      	ldr	r3, [pc, #336]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062e8:	e196      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ee:	e193      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062f6:	d173      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80062f8:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006308:	d02f      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006310:	d863      	bhi.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631e:	d012      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006320:	e05b      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006322:	4b41      	ldr	r3, [pc, #260]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800632a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006330:	f107 0318 	add.w	r3, r7, #24
 8006334:	4618      	mov	r0, r3
 8006336:	f000 f993 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800633e:	e16b      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006344:	e168      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006346:	4b38      	ldr	r3, [pc, #224]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800634e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006352:	d107      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006354:	f107 030c 	add.w	r3, r7, #12
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fad5 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006362:	e159      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006368:	e156      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800636a:	4b2f      	ldr	r3, [pc, #188]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800636c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006372:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006374:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b04      	cmp	r3, #4
 800637e:	d10c      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006386:	4b28      	ldr	r3, [pc, #160]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	08db      	lsrs	r3, r3, #3
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006398:	e01e      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a6:	d106      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ae:	d102      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80063b0:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	e010      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063b6:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063c2:	d106      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ca:	d102      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063cc:	4b19      	ldr	r3, [pc, #100]	; (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d0:	e002      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80063d6:	e11f      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80063d8:	e11e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063de:	e11b      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e6:	d13e      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fe:	d01d      	beq.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006400:	e02e      	b.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800640e:	d107      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fbcb 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800641e:	e0fb      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006424:	e0f8      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
 800642c:	03d09000 	.word	0x03d09000
 8006430:	003d0900 	.word	0x003d0900
 8006434:	007a1200 	.word	0x007a1200
 8006438:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006448:	d107      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644a:	f107 0318 	add.w	r3, r7, #24
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f906 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006458:	e0de      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800645e:	e0db      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006464:	e0d8      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800646c:	f040 8085 	bne.w	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006470:	4b6c      	ldr	r3, [pc, #432]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006478:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006480:	d06b      	beq.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006488:	d874      	bhi.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d056      	beq.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d86c      	bhi.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064a0:	d03b      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064a8:	d864      	bhi.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b0:	d021      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b8:	d85c      	bhi.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c6:	d004      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80064c8:	e054      	b.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80064ca:	f000 f8b3 	bl	8006634 <HAL_RCCEx_GetD3PCLK1Freq>
 80064ce:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80064d0:	e0a2      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064d2:	4b54      	ldr	r3, [pc, #336]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064de:	d107      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e0:	f107 0318 	add.w	r3, r7, #24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f8bb 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80064ee:	e093      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064f4:	e090      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064f6:	4b4b      	ldr	r3, [pc, #300]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006502:	d107      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006504:	f107 030c 	add.w	r3, r7, #12
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f9fd 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006512:	e081      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006518:	e07e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800651a:	4b42      	ldr	r3, [pc, #264]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b04      	cmp	r3, #4
 8006524:	d109      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006526:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	08db      	lsrs	r3, r3, #3
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	4a3d      	ldr	r2, [pc, #244]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006532:	fa22 f303 	lsr.w	r3, r2, r3
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006538:	e06e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800653e:	e06b      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006540:	4b38      	ldr	r3, [pc, #224]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654c:	d102      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006552:	e061      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006558:	e05e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800655a:	4b32      	ldr	r3, [pc, #200]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006566:	d102      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006568:	4b31      	ldr	r3, [pc, #196]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800656c:	e054      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006572:	e051      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006578:	e04e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006580:	d148      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006582:	4b28      	ldr	r3, [pc, #160]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800658a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006592:	d02a      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659a:	d838      	bhi.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a8:	d00d      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80065aa:	e030      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b8:	d102      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065be:	e02b      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c4:	e028      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065c6:	4b17      	ldr	r3, [pc, #92]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fae9 	bl	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065e2:	e019      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065e8:	e016      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f6:	d107      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f8:	f107 0318 	add.w	r3, r7, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f82f 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006606:	e007      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660c:	e004      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006612:	e001      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800661a:	4618      	mov	r0, r3
 800661c:	3740      	adds	r7, #64	; 0x40
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	58024400 	.word	0x58024400
 8006628:	03d09000 	.word	0x03d09000
 800662c:	003d0900 	.word	0x003d0900
 8006630:	007a1200 	.word	0x007a1200

08006634 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006638:	f7fe fb88 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 800663c:	4602      	mov	r2, r0
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	4904      	ldr	r1, [pc, #16]	; (800665c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800664a:	5ccb      	ldrb	r3, [r1, r3]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	58024400 	.word	0x58024400
 800665c:	08009548 	.word	0x08009548

08006660 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006668:	4ba1      	ldr	r3, [pc, #644]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006672:	4b9f      	ldr	r3, [pc, #636]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	0b1b      	lsrs	r3, r3, #12
 8006678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800667e:	4b9c      	ldr	r3, [pc, #624]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	091b      	lsrs	r3, r3, #4
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800668a:	4b99      	ldr	r3, [pc, #612]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	08db      	lsrs	r3, r3, #3
 8006690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	fb02 f303 	mul.w	r3, r2, r3
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8111 	beq.w	80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	f000 8083 	beq.w	80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	f200 80a1 	bhi.w	8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d056      	beq.n	8006778 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066ca:	e099      	b.n	8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066cc:	4b88      	ldr	r3, [pc, #544]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d02d      	beq.n	8006734 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066d8:	4b85      	ldr	r3, [pc, #532]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	08db      	lsrs	r3, r3, #3
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	4a84      	ldr	r2, [pc, #528]	; (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
 80066e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	ee07 3a90 	vmov	s15, r3
 80066f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006702:	4b7b      	ldr	r3, [pc, #492]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006712:	ed97 6a03 	vldr	s12, [r7, #12]
 8006716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800671a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006732:	e087      	b.n	8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006746:	4b6a      	ldr	r3, [pc, #424]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006756:	ed97 6a03 	vldr	s12, [r7, #12]
 800675a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800675e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006776:	e065      	b.n	8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678a:	4b59      	ldr	r3, [pc, #356]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679a:	ed97 6a03 	vldr	s12, [r7, #12]
 800679e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ba:	e043      	b.n	8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ce:	4b48      	ldr	r3, [pc, #288]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067de:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067fe:	e021      	b.n	8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800680e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006812:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006822:	ed97 6a03 	vldr	s12, [r7, #12]
 8006826:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800682a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006842:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006844:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	0a5b      	lsrs	r3, r3, #9
 800684a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800685a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800685e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800686a:	ee17 2a90 	vmov	r2, s15
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006872:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800688c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006898:	ee17 2a90 	vmov	r2, s15
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80068be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c6:	ee17 2a90 	vmov	r2, s15
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068ce:	e008      	b.n	80068e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	609a      	str	r2, [r3, #8]
}
 80068e2:	bf00      	nop
 80068e4:	3724      	adds	r7, #36	; 0x24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58024400 	.word	0x58024400
 80068f4:	03d09000 	.word	0x03d09000
 80068f8:	46000000 	.word	0x46000000
 80068fc:	4c742400 	.word	0x4c742400
 8006900:	4a742400 	.word	0x4a742400
 8006904:	4af42400 	.word	0x4af42400

08006908 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006908:	b480      	push	{r7}
 800690a:	b089      	sub	sp, #36	; 0x24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006910:	4ba1      	ldr	r3, [pc, #644]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800691a:	4b9f      	ldr	r3, [pc, #636]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	0d1b      	lsrs	r3, r3, #20
 8006920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006924:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006926:	4b9c      	ldr	r3, [pc, #624]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	0a1b      	lsrs	r3, r3, #8
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006932:	4b99      	ldr	r3, [pc, #612]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	08db      	lsrs	r3, r3, #3
 8006938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8111 	beq.w	8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b02      	cmp	r3, #2
 800695a:	f000 8083 	beq.w	8006a64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f200 80a1 	bhi.w	8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d056      	beq.n	8006a20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006972:	e099      	b.n	8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006974:	4b88      	ldr	r3, [pc, #544]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02d      	beq.n	80069dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006980:	4b85      	ldr	r3, [pc, #532]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	08db      	lsrs	r3, r3, #3
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	4a84      	ldr	r2, [pc, #528]	; (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069aa:	4b7b      	ldr	r3, [pc, #492]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80069be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069da:	e087      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ee:	4b6a      	ldr	r3, [pc, #424]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a1e:	e065      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a32:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a62:	e043      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a76:	4b48      	ldr	r3, [pc, #288]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aa6:	e021      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aba:	4b37      	ldr	r3, [pc, #220]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ace:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006aec:	4b2a      	ldr	r3, [pc, #168]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	0a5b      	lsrs	r3, r3, #9
 8006af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b12:	ee17 2a90 	vmov	r2, s15
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b1a:	4b1f      	ldr	r3, [pc, #124]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b40:	ee17 2a90 	vmov	r2, s15
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b48:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	0e1b      	lsrs	r3, r3, #24
 8006b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6e:	ee17 2a90 	vmov	r2, s15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b76:	e008      	b.n	8006b8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
}
 8006b8a:	bf00      	nop
 8006b8c:	3724      	adds	r7, #36	; 0x24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	58024400 	.word	0x58024400
 8006b9c:	03d09000 	.word	0x03d09000
 8006ba0:	46000000 	.word	0x46000000
 8006ba4:	4c742400 	.word	0x4c742400
 8006ba8:	4a742400 	.word	0x4a742400
 8006bac:	4af42400 	.word	0x4af42400

08006bb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	; 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bb8:	4ba0      	ldr	r3, [pc, #640]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006bc2:	4b9e      	ldr	r3, [pc, #632]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006bce:	4b9b      	ldr	r3, [pc, #620]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006bd8:	4b98      	ldr	r3, [pc, #608]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8111 	beq.w	8006e1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	f000 8083 	beq.w	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	f200 80a1 	bhi.w	8006d4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d056      	beq.n	8006cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006c18:	e099      	b.n	8006d4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1a:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d02d      	beq.n	8006c82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c26:	4b85      	ldr	r3, [pc, #532]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	4a83      	ldr	r2, [pc, #524]	; (8006e40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006c32:	fa22 f303 	lsr.w	r3, r2, r3
 8006c36:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c50:	4b7a      	ldr	r3, [pc, #488]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c60:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c80:	e087      	b.n	8006d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006e48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c94:	4b69      	ldr	r3, [pc, #420]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cc4:	e065      	b.n	8006d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd8:	4b58      	ldr	r3, [pc, #352]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d08:	e043      	b.n	8006d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1c:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d4c:	e021      	b.n	8006d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006e48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	0a5b      	lsrs	r3, r3, #9
 8006d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db8:	ee17 2a90 	vmov	r2, s15
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de6:	ee17 2a90 	vmov	r2, s15
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	0e1b      	lsrs	r3, r3, #24
 8006df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df8:	ee07 3a90 	vmov	s15, r3
 8006dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e14:	ee17 2a90 	vmov	r2, s15
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006e1c:	e008      	b.n	8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	bf00      	nop
 8006e32:	3724      	adds	r7, #36	; 0x24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	03d09000 	.word	0x03d09000
 8006e44:	46000000 	.word	0x46000000
 8006e48:	4c742400 	.word	0x4c742400
 8006e4c:	4a742400 	.word	0x4a742400
 8006e50:	4af42400 	.word	0x4af42400

08006e54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e62:	4b53      	ldr	r3, [pc, #332]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d101      	bne.n	8006e72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e099      	b.n	8006fa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e72:	4b4f      	ldr	r3, [pc, #316]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a4e      	ldr	r2, [pc, #312]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006e78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7e:	f7fa fb81 	bl	8001584 <HAL_GetTick>
 8006e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e84:	e008      	b.n	8006e98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e86:	f7fa fb7d 	bl	8001584 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e086      	b.n	8006fa6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e98:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f0      	bne.n	8006e86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ea4:	4b42      	ldr	r3, [pc, #264]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	493f      	ldr	r1, [pc, #252]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	025b      	lsls	r3, r3, #9
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	061b      	lsls	r3, r3, #24
 8006ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ee8:	4931      	ldr	r1, [pc, #196]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006eee:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	492d      	ldr	r1, [pc, #180]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f00:	4b2b      	ldr	r3, [pc, #172]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	f023 0220 	bic.w	r2, r3, #32
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	4928      	ldr	r1, [pc, #160]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f12:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	f023 0310 	bic.w	r3, r3, #16
 8006f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f1e:	4b24      	ldr	r3, [pc, #144]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <RCCEx_PLL2_Config+0x160>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	69d2      	ldr	r2, [r2, #28]
 8006f2a:	00d2      	lsls	r2, r2, #3
 8006f2c:	4920      	ldr	r1, [pc, #128]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f32:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f38:	f043 0310 	orr.w	r3, r3, #16
 8006f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f44:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f50:	e00f      	b.n	8006f72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d106      	bne.n	8006f66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f58:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	4a14      	ldr	r2, [pc, #80]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f64:	e005      	b.n	8006f72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a11      	ldr	r2, [pc, #68]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7e:	f7fa fb01 	bl	8001584 <HAL_GetTick>
 8006f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f84:	e008      	b.n	8006f98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f86:	f7fa fafd 	bl	8001584 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e006      	b.n	8006fa6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <RCCEx_PLL2_Config+0x15c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	ffff0007 	.word	0xffff0007

08006fb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fc6:	4b53      	ldr	r3, [pc, #332]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d101      	bne.n	8006fd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e099      	b.n	800710a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fd6:	4b4f      	ldr	r3, [pc, #316]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a4e      	ldr	r2, [pc, #312]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8006fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe2:	f7fa facf 	bl	8001584 <HAL_GetTick>
 8006fe6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fe8:	e008      	b.n	8006ffc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006fea:	f7fa facb 	bl	8001584 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e086      	b.n	800710a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ffc:	4b45      	ldr	r3, [pc, #276]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f0      	bne.n	8006fea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007008:	4b42      	ldr	r3, [pc, #264]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	051b      	lsls	r3, r3, #20
 8007016:	493f      	ldr	r1, [pc, #252]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007018:	4313      	orrs	r3, r2
 800701a:	628b      	str	r3, [r1, #40]	; 0x28
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	3b01      	subs	r3, #1
 800702c:	025b      	lsls	r3, r3, #9
 800702e:	b29b      	uxth	r3, r3
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	3b01      	subs	r3, #1
 8007038:	041b      	lsls	r3, r3, #16
 800703a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	3b01      	subs	r3, #1
 8007046:	061b      	lsls	r3, r3, #24
 8007048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800704c:	4931      	ldr	r1, [pc, #196]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 800704e:	4313      	orrs	r3, r2
 8007050:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007052:	4b30      	ldr	r3, [pc, #192]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	492d      	ldr	r1, [pc, #180]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007060:	4313      	orrs	r3, r2
 8007062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	4928      	ldr	r1, [pc, #160]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007072:	4313      	orrs	r3, r2
 8007074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 800707c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007082:	4b24      	ldr	r3, [pc, #144]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007086:	4b24      	ldr	r3, [pc, #144]	; (8007118 <RCCEx_PLL3_Config+0x160>)
 8007088:	4013      	ands	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	69d2      	ldr	r2, [r2, #28]
 800708e:	00d2      	lsls	r2, r2, #3
 8007090:	4920      	ldr	r1, [pc, #128]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007096:	4b1f      	ldr	r3, [pc, #124]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 800709c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070b4:	e00f      	b.n	80070d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d106      	bne.n	80070ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070bc:	4b15      	ldr	r3, [pc, #84]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070c8:	e005      	b.n	80070d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	4a11      	ldr	r2, [pc, #68]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e2:	f7fa fa4f 	bl	8001584 <HAL_GetTick>
 80070e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070e8:	e008      	b.n	80070fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070ea:	f7fa fa4b 	bl	8001584 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e006      	b.n	800710a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <RCCEx_PLL3_Config+0x15c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	58024400 	.word	0x58024400
 8007118:	ffff0007 	.word	0xffff0007

0800711c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e042      	b.n	80071b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fa f83b 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2224      	movs	r2, #36	; 0x24
 800714a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0201 	bic.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f996 	bl	8007490 <UART_SetConfig>
 8007164:	4603      	mov	r3, r0
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e022      	b.n	80071b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fef2 	bl	8007f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800718a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800719a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 ff79 	bl	80080a4 <UART_CheckIdleState>
 80071b2:	4603      	mov	r3, r0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	f040 8083 	bne.w	80072de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_UART_Transmit+0x28>
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e07b      	b.n	80072e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_UART_Transmit+0x3a>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e074      	b.n	80072e0 <HAL_UART_Transmit+0x124>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2221      	movs	r2, #33	; 0x21
 800720a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800720e:	f7fa f9b9 	bl	8001584 <HAL_GetTick>
 8007212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722c:	d108      	bne.n	8007240 <HAL_UART_Transmit+0x84>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	e003      	b.n	8007248 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007250:	e02c      	b.n	80072ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2200      	movs	r2, #0
 800725a:	2180      	movs	r1, #128	; 0x80
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 ff6c 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e039      	b.n	80072e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	3302      	adds	r3, #2
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	e007      	b.n	800729a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	781a      	ldrb	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	3301      	adds	r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1cc      	bne.n	8007252 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	2140      	movs	r1, #64	; 0x40
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 ff39 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e006      	b.n	80072e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e000      	b.n	80072e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80072de:	2302      	movs	r3, #2
  }
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3720      	adds	r7, #32
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	2b20      	cmp	r3, #32
 8007300:	f040 80c0 	bne.w	8007484 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_UART_Receive+0x28>
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0b8      	b.n	8007486 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_UART_Receive+0x3a>
 800731e:	2302      	movs	r3, #2
 8007320:	e0b1      	b.n	8007486 <HAL_UART_Receive+0x19e>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2222      	movs	r2, #34	; 0x22
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007340:	f7fa f920 	bl	8001584 <HAL_GetTick>
 8007344:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	88fa      	ldrh	r2, [r7, #6]
 800734a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735e:	d10e      	bne.n	800737e <HAL_UART_Receive+0x96>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d105      	bne.n	8007374 <HAL_UART_Receive+0x8c>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800736e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007372:	e02d      	b.n	80073d0 <HAL_UART_Receive+0xe8>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	22ff      	movs	r2, #255	; 0xff
 8007378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800737c:	e028      	b.n	80073d0 <HAL_UART_Receive+0xe8>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10d      	bne.n	80073a2 <HAL_UART_Receive+0xba>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d104      	bne.n	8007398 <HAL_UART_Receive+0xb0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	22ff      	movs	r2, #255	; 0xff
 8007392:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007396:	e01b      	b.n	80073d0 <HAL_UART_Receive+0xe8>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	227f      	movs	r2, #127	; 0x7f
 800739c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073a0:	e016      	b.n	80073d0 <HAL_UART_Receive+0xe8>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073aa:	d10d      	bne.n	80073c8 <HAL_UART_Receive+0xe0>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <HAL_UART_Receive+0xd6>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	227f      	movs	r2, #127	; 0x7f
 80073b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073bc:	e008      	b.n	80073d0 <HAL_UART_Receive+0xe8>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	223f      	movs	r2, #63	; 0x3f
 80073c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073c6:	e003      	b.n	80073d0 <HAL_UART_Receive+0xe8>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d108      	bne.n	80073f4 <HAL_UART_Receive+0x10c>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	e003      	b.n	80073fc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007404:	e032      	b.n	800746c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	2120      	movs	r1, #32
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fe92 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e032      	b.n	8007486 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10c      	bne.n	8007440 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	b29a      	uxth	r2, r3
 800742e:	8a7b      	ldrh	r3, [r7, #18]
 8007430:	4013      	ands	r3, r2
 8007432:	b29a      	uxth	r2, r3
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	3302      	adds	r3, #2
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e00c      	b.n	800745a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	b2da      	uxtb	r2, r3
 8007448:	8a7b      	ldrh	r3, [r7, #18]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	4013      	ands	r3, r2
 800744e:	b2da      	uxtb	r2, r3
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3301      	adds	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1c6      	bne.n	8007406 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007494:	b092      	sub	sp, #72	; 0x48
 8007496:	af00      	add	r7, sp, #0
 8007498:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4bbe      	ldr	r3, [pc, #760]	; (80077b8 <UART_SetConfig+0x328>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074c8:	430b      	orrs	r3, r1
 80074ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4ab3      	ldr	r2, [pc, #716]	; (80077bc <UART_SetConfig+0x32c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f8:	4313      	orrs	r3, r2
 80074fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	4baf      	ldr	r3, [pc, #700]	; (80077c0 <UART_SetConfig+0x330>)
 8007504:	4013      	ands	r3, r2
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800750c:	430b      	orrs	r3, r1
 800750e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f023 010f 	bic.w	r1, r3, #15
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4aa6      	ldr	r2, [pc, #664]	; (80077c4 <UART_SetConfig+0x334>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d177      	bne.n	8007620 <UART_SetConfig+0x190>
 8007530:	4ba5      	ldr	r3, [pc, #660]	; (80077c8 <UART_SetConfig+0x338>)
 8007532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007538:	2b28      	cmp	r3, #40	; 0x28
 800753a:	d86d      	bhi.n	8007618 <UART_SetConfig+0x188>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0xb4>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	080075e9 	.word	0x080075e9
 8007548:	08007619 	.word	0x08007619
 800754c:	08007619 	.word	0x08007619
 8007550:	08007619 	.word	0x08007619
 8007554:	08007619 	.word	0x08007619
 8007558:	08007619 	.word	0x08007619
 800755c:	08007619 	.word	0x08007619
 8007560:	08007619 	.word	0x08007619
 8007564:	080075f1 	.word	0x080075f1
 8007568:	08007619 	.word	0x08007619
 800756c:	08007619 	.word	0x08007619
 8007570:	08007619 	.word	0x08007619
 8007574:	08007619 	.word	0x08007619
 8007578:	08007619 	.word	0x08007619
 800757c:	08007619 	.word	0x08007619
 8007580:	08007619 	.word	0x08007619
 8007584:	080075f9 	.word	0x080075f9
 8007588:	08007619 	.word	0x08007619
 800758c:	08007619 	.word	0x08007619
 8007590:	08007619 	.word	0x08007619
 8007594:	08007619 	.word	0x08007619
 8007598:	08007619 	.word	0x08007619
 800759c:	08007619 	.word	0x08007619
 80075a0:	08007619 	.word	0x08007619
 80075a4:	08007601 	.word	0x08007601
 80075a8:	08007619 	.word	0x08007619
 80075ac:	08007619 	.word	0x08007619
 80075b0:	08007619 	.word	0x08007619
 80075b4:	08007619 	.word	0x08007619
 80075b8:	08007619 	.word	0x08007619
 80075bc:	08007619 	.word	0x08007619
 80075c0:	08007619 	.word	0x08007619
 80075c4:	08007609 	.word	0x08007609
 80075c8:	08007619 	.word	0x08007619
 80075cc:	08007619 	.word	0x08007619
 80075d0:	08007619 	.word	0x08007619
 80075d4:	08007619 	.word	0x08007619
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007619 	.word	0x08007619
 80075e0:	08007619 	.word	0x08007619
 80075e4:	08007611 	.word	0x08007611
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e222      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e21e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e21a      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007600:	2310      	movs	r3, #16
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007606:	e216      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007608:	2320      	movs	r3, #32
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e212      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007610:	2340      	movs	r3, #64	; 0x40
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e20e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007618:	2380      	movs	r3, #128	; 0x80
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e20a      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a69      	ldr	r2, [pc, #420]	; (80077cc <UART_SetConfig+0x33c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d130      	bne.n	800768c <UART_SetConfig+0x1fc>
 800762a:	4b67      	ldr	r3, [pc, #412]	; (80077c8 <UART_SetConfig+0x338>)
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	2b05      	cmp	r3, #5
 8007634:	d826      	bhi.n	8007684 <UART_SetConfig+0x1f4>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0x1ac>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007655 	.word	0x08007655
 8007640:	0800765d 	.word	0x0800765d
 8007644:	08007665 	.word	0x08007665
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007675 	.word	0x08007675
 8007650:	0800767d 	.word	0x0800767d
 8007654:	2300      	movs	r3, #0
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e1ec      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800765c:	2304      	movs	r3, #4
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e1e8      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007664:	2308      	movs	r3, #8
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e1e4      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800766c:	2310      	movs	r3, #16
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e1e0      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007674:	2320      	movs	r3, #32
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e1dc      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800767c:	2340      	movs	r3, #64	; 0x40
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e1d8      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e1d4      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a4f      	ldr	r2, [pc, #316]	; (80077d0 <UART_SetConfig+0x340>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d130      	bne.n	80076f8 <UART_SetConfig+0x268>
 8007696:	4b4c      	ldr	r3, [pc, #304]	; (80077c8 <UART_SetConfig+0x338>)
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b05      	cmp	r3, #5
 80076a0:	d826      	bhi.n	80076f0 <UART_SetConfig+0x260>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0x218>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076c1 	.word	0x080076c1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076d1 	.word	0x080076d1
 80076b4:	080076d9 	.word	0x080076d9
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e1b6      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076c8:	2304      	movs	r3, #4
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ce:	e1b2      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076d0:	2308      	movs	r3, #8
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e1ae      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076d8:	2310      	movs	r3, #16
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e1aa      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076e0:	2320      	movs	r3, #32
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e1a6      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076e8:	2340      	movs	r3, #64	; 0x40
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e1a2      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076f0:	2380      	movs	r3, #128	; 0x80
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e19e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a35      	ldr	r2, [pc, #212]	; (80077d4 <UART_SetConfig+0x344>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d130      	bne.n	8007764 <UART_SetConfig+0x2d4>
 8007702:	4b31      	ldr	r3, [pc, #196]	; (80077c8 <UART_SetConfig+0x338>)
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	2b05      	cmp	r3, #5
 800770c:	d826      	bhi.n	800775c <UART_SetConfig+0x2cc>
 800770e:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <UART_SetConfig+0x284>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	0800772d 	.word	0x0800772d
 8007718:	08007735 	.word	0x08007735
 800771c:	0800773d 	.word	0x0800773d
 8007720:	08007745 	.word	0x08007745
 8007724:	0800774d 	.word	0x0800774d
 8007728:	08007755 	.word	0x08007755
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e180      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007734:	2304      	movs	r3, #4
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e17c      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800773c:	2308      	movs	r3, #8
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e178      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007744:	2310      	movs	r3, #16
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e174      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800774c:	2320      	movs	r3, #32
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007752:	e170      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007754:	2340      	movs	r3, #64	; 0x40
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775a:	e16c      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800775c:	2380      	movs	r3, #128	; 0x80
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e168      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <UART_SetConfig+0x348>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d142      	bne.n	80077f4 <UART_SetConfig+0x364>
 800776e:	4b16      	ldr	r3, [pc, #88]	; (80077c8 <UART_SetConfig+0x338>)
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b05      	cmp	r3, #5
 8007778:	d838      	bhi.n	80077ec <UART_SetConfig+0x35c>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <UART_SetConfig+0x2f0>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007799 	.word	0x08007799
 8007784:	080077a1 	.word	0x080077a1
 8007788:	080077a9 	.word	0x080077a9
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077dd 	.word	0x080077dd
 8007794:	080077e5 	.word	0x080077e5
 8007798:	2300      	movs	r3, #0
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e14a      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e146      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e142      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e13e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077b8:	cfff69f3 	.word	0xcfff69f3
 80077bc:	58000c00 	.word	0x58000c00
 80077c0:	11fff4ff 	.word	0x11fff4ff
 80077c4:	40011000 	.word	0x40011000
 80077c8:	58024400 	.word	0x58024400
 80077cc:	40004400 	.word	0x40004400
 80077d0:	40004800 	.word	0x40004800
 80077d4:	40004c00 	.word	0x40004c00
 80077d8:	40005000 	.word	0x40005000
 80077dc:	2320      	movs	r3, #32
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e128      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077e4:	2340      	movs	r3, #64	; 0x40
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e124      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077ec:	2380      	movs	r3, #128	; 0x80
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e120      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4acb      	ldr	r2, [pc, #812]	; (8007b28 <UART_SetConfig+0x698>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d176      	bne.n	80078ec <UART_SetConfig+0x45c>
 80077fe:	4bcb      	ldr	r3, [pc, #812]	; (8007b2c <UART_SetConfig+0x69c>)
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007806:	2b28      	cmp	r3, #40	; 0x28
 8007808:	d86c      	bhi.n	80078e4 <UART_SetConfig+0x454>
 800780a:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0x380>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	080078b5 	.word	0x080078b5
 8007814:	080078e5 	.word	0x080078e5
 8007818:	080078e5 	.word	0x080078e5
 800781c:	080078e5 	.word	0x080078e5
 8007820:	080078e5 	.word	0x080078e5
 8007824:	080078e5 	.word	0x080078e5
 8007828:	080078e5 	.word	0x080078e5
 800782c:	080078e5 	.word	0x080078e5
 8007830:	080078bd 	.word	0x080078bd
 8007834:	080078e5 	.word	0x080078e5
 8007838:	080078e5 	.word	0x080078e5
 800783c:	080078e5 	.word	0x080078e5
 8007840:	080078e5 	.word	0x080078e5
 8007844:	080078e5 	.word	0x080078e5
 8007848:	080078e5 	.word	0x080078e5
 800784c:	080078e5 	.word	0x080078e5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078e5 	.word	0x080078e5
 8007858:	080078e5 	.word	0x080078e5
 800785c:	080078e5 	.word	0x080078e5
 8007860:	080078e5 	.word	0x080078e5
 8007864:	080078e5 	.word	0x080078e5
 8007868:	080078e5 	.word	0x080078e5
 800786c:	080078e5 	.word	0x080078e5
 8007870:	080078cd 	.word	0x080078cd
 8007874:	080078e5 	.word	0x080078e5
 8007878:	080078e5 	.word	0x080078e5
 800787c:	080078e5 	.word	0x080078e5
 8007880:	080078e5 	.word	0x080078e5
 8007884:	080078e5 	.word	0x080078e5
 8007888:	080078e5 	.word	0x080078e5
 800788c:	080078e5 	.word	0x080078e5
 8007890:	080078d5 	.word	0x080078d5
 8007894:	080078e5 	.word	0x080078e5
 8007898:	080078e5 	.word	0x080078e5
 800789c:	080078e5 	.word	0x080078e5
 80078a0:	080078e5 	.word	0x080078e5
 80078a4:	080078e5 	.word	0x080078e5
 80078a8:	080078e5 	.word	0x080078e5
 80078ac:	080078e5 	.word	0x080078e5
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e0bc      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078bc:	2304      	movs	r3, #4
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c2:	e0b8      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078c4:	2308      	movs	r3, #8
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e0b4      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078cc:	2310      	movs	r3, #16
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e0b0      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078d4:	2320      	movs	r3, #32
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e0ac      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e0a8      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078e4:	2380      	movs	r3, #128	; 0x80
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e0a4      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a8f      	ldr	r2, [pc, #572]	; (8007b30 <UART_SetConfig+0x6a0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d130      	bne.n	8007958 <UART_SetConfig+0x4c8>
 80078f6:	4b8d      	ldr	r3, [pc, #564]	; (8007b2c <UART_SetConfig+0x69c>)
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d826      	bhi.n	8007950 <UART_SetConfig+0x4c0>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x478>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007921 	.word	0x08007921
 800790c:	08007929 	.word	0x08007929
 8007910:	08007931 	.word	0x08007931
 8007914:	08007939 	.word	0x08007939
 8007918:	08007941 	.word	0x08007941
 800791c:	08007949 	.word	0x08007949
 8007920:	2300      	movs	r3, #0
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e086      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792e:	e082      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e07e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e07a      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007940:	2320      	movs	r3, #32
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e076      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794e:	e072      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007950:	2380      	movs	r3, #128	; 0x80
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e06e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a75      	ldr	r2, [pc, #468]	; (8007b34 <UART_SetConfig+0x6a4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d130      	bne.n	80079c4 <UART_SetConfig+0x534>
 8007962:	4b72      	ldr	r3, [pc, #456]	; (8007b2c <UART_SetConfig+0x69c>)
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b05      	cmp	r3, #5
 800796c:	d826      	bhi.n	80079bc <UART_SetConfig+0x52c>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x4e4>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007995 	.word	0x08007995
 800797c:	0800799d 	.word	0x0800799d
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079ad 	.word	0x080079ad
 8007988:	080079b5 	.word	0x080079b5
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e050      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007994:	2304      	movs	r3, #4
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e04c      	b.n	8007a36 <UART_SetConfig+0x5a6>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e048      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e044      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80079ac:	2320      	movs	r3, #32
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e040      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e03c      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80079bc:	2380      	movs	r3, #128	; 0x80
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e038      	b.n	8007a36 <UART_SetConfig+0x5a6>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a5b      	ldr	r2, [pc, #364]	; (8007b38 <UART_SetConfig+0x6a8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d130      	bne.n	8007a30 <UART_SetConfig+0x5a0>
 80079ce:	4b57      	ldr	r3, [pc, #348]	; (8007b2c <UART_SetConfig+0x69c>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d826      	bhi.n	8007a28 <UART_SetConfig+0x598>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x550>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	2302      	movs	r3, #2
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e01a      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e016      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e012      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e00e      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e00a      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e006      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e002      	b.n	8007a36 <UART_SetConfig+0x5a6>
 8007a30:	2380      	movs	r3, #128	; 0x80
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <UART_SetConfig+0x6a8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	f040 80f8 	bne.w	8007c32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	dc46      	bgt.n	8007ad8 <UART_SetConfig+0x648>
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	f2c0 8082 	blt.w	8007b54 <UART_SetConfig+0x6c4>
 8007a50:	3b02      	subs	r3, #2
 8007a52:	2b1e      	cmp	r3, #30
 8007a54:	d87e      	bhi.n	8007b54 <UART_SetConfig+0x6c4>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0x5cc>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007adf 	.word	0x08007adf
 8007a60:	08007b55 	.word	0x08007b55
 8007a64:	08007ae7 	.word	0x08007ae7
 8007a68:	08007b55 	.word	0x08007b55
 8007a6c:	08007b55 	.word	0x08007b55
 8007a70:	08007b55 	.word	0x08007b55
 8007a74:	08007af7 	.word	0x08007af7
 8007a78:	08007b55 	.word	0x08007b55
 8007a7c:	08007b55 	.word	0x08007b55
 8007a80:	08007b55 	.word	0x08007b55
 8007a84:	08007b55 	.word	0x08007b55
 8007a88:	08007b55 	.word	0x08007b55
 8007a8c:	08007b55 	.word	0x08007b55
 8007a90:	08007b55 	.word	0x08007b55
 8007a94:	08007b07 	.word	0x08007b07
 8007a98:	08007b55 	.word	0x08007b55
 8007a9c:	08007b55 	.word	0x08007b55
 8007aa0:	08007b55 	.word	0x08007b55
 8007aa4:	08007b55 	.word	0x08007b55
 8007aa8:	08007b55 	.word	0x08007b55
 8007aac:	08007b55 	.word	0x08007b55
 8007ab0:	08007b55 	.word	0x08007b55
 8007ab4:	08007b55 	.word	0x08007b55
 8007ab8:	08007b55 	.word	0x08007b55
 8007abc:	08007b55 	.word	0x08007b55
 8007ac0:	08007b55 	.word	0x08007b55
 8007ac4:	08007b55 	.word	0x08007b55
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b55 	.word	0x08007b55
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007b47 	.word	0x08007b47
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d037      	beq.n	8007b4c <UART_SetConfig+0x6bc>
 8007adc:	e03a      	b.n	8007b54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ade:	f7fe fda9 	bl	8006634 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ae4:	e03c      	b.n	8007b60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fdb8 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af4:	e034      	b.n	8007b60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af6:	f107 0318 	add.w	r3, r7, #24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe ff04 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b04:	e02c      	b.n	8007b60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b06:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <UART_SetConfig+0x69c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <UART_SetConfig+0x69c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	08db      	lsrs	r3, r3, #3
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	4a07      	ldr	r2, [pc, #28]	; (8007b3c <UART_SetConfig+0x6ac>)
 8007b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b24:	e01c      	b.n	8007b60 <UART_SetConfig+0x6d0>
 8007b26:	bf00      	nop
 8007b28:	40011400 	.word	0x40011400
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	40007800 	.word	0x40007800
 8007b34:	40007c00 	.word	0x40007c00
 8007b38:	58000c00 	.word	0x58000c00
 8007b3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b40:	4b9d      	ldr	r3, [pc, #628]	; (8007db8 <UART_SetConfig+0x928>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b44:	e00c      	b.n	8007b60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b46:	4b9d      	ldr	r3, [pc, #628]	; (8007dbc <UART_SetConfig+0x92c>)
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4a:	e009      	b.n	8007b60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b52:	e005      	b.n	8007b60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 81de 	beq.w	8007f24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	4a94      	ldr	r2, [pc, #592]	; (8007dc0 <UART_SetConfig+0x930>)
 8007b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	4613      	mov	r3, r2
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	4413      	add	r3, r2
 8007b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d305      	bcc.n	8007b98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d903      	bls.n	8007ba0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b9e:	e1c1      	b.n	8007f24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	60fa      	str	r2, [r7, #12]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	4a84      	ldr	r2, [pc, #528]	; (8007dc0 <UART_SetConfig+0x930>)
 8007bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bc2:	f7f8 fbdd 	bl	8000380 <__aeabi_uldivmod>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	020b      	lsls	r3, r1, #8
 8007bd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bdc:	0202      	lsls	r2, r0, #8
 8007bde:	6979      	ldr	r1, [r7, #20]
 8007be0:	6849      	ldr	r1, [r1, #4]
 8007be2:	0849      	lsrs	r1, r1, #1
 8007be4:	2000      	movs	r0, #0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4605      	mov	r5, r0
 8007bea:	eb12 0804 	adds.w	r8, r2, r4
 8007bee:	eb43 0905 	adc.w	r9, r3, r5
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	469a      	mov	sl, r3
 8007bfa:	4693      	mov	fp, r2
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	465b      	mov	r3, fp
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 fbbc 	bl	8000380 <__aeabi_uldivmod>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c16:	d308      	bcc.n	8007c2a <UART_SetConfig+0x79a>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1e:	d204      	bcs.n	8007c2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	e17c      	b.n	8007f24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c30:	e178      	b.n	8007f24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3a:	f040 80c5 	bne.w	8007dc8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	dc48      	bgt.n	8007cd8 <UART_SetConfig+0x848>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	db7b      	blt.n	8007d42 <UART_SetConfig+0x8b2>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d879      	bhi.n	8007d42 <UART_SetConfig+0x8b2>
 8007c4e:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <UART_SetConfig+0x7c4>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007cdf 	.word	0x08007cdf
 8007c58:	08007ce7 	.word	0x08007ce7
 8007c5c:	08007d43 	.word	0x08007d43
 8007c60:	08007d43 	.word	0x08007d43
 8007c64:	08007cef 	.word	0x08007cef
 8007c68:	08007d43 	.word	0x08007d43
 8007c6c:	08007d43 	.word	0x08007d43
 8007c70:	08007d43 	.word	0x08007d43
 8007c74:	08007cff 	.word	0x08007cff
 8007c78:	08007d43 	.word	0x08007d43
 8007c7c:	08007d43 	.word	0x08007d43
 8007c80:	08007d43 	.word	0x08007d43
 8007c84:	08007d43 	.word	0x08007d43
 8007c88:	08007d43 	.word	0x08007d43
 8007c8c:	08007d43 	.word	0x08007d43
 8007c90:	08007d43 	.word	0x08007d43
 8007c94:	08007d0f 	.word	0x08007d0f
 8007c98:	08007d43 	.word	0x08007d43
 8007c9c:	08007d43 	.word	0x08007d43
 8007ca0:	08007d43 	.word	0x08007d43
 8007ca4:	08007d43 	.word	0x08007d43
 8007ca8:	08007d43 	.word	0x08007d43
 8007cac:	08007d43 	.word	0x08007d43
 8007cb0:	08007d43 	.word	0x08007d43
 8007cb4:	08007d43 	.word	0x08007d43
 8007cb8:	08007d43 	.word	0x08007d43
 8007cbc:	08007d43 	.word	0x08007d43
 8007cc0:	08007d43 	.word	0x08007d43
 8007cc4:	08007d43 	.word	0x08007d43
 8007cc8:	08007d43 	.word	0x08007d43
 8007ccc:	08007d43 	.word	0x08007d43
 8007cd0:	08007d43 	.word	0x08007d43
 8007cd4:	08007d35 	.word	0x08007d35
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	d02e      	beq.n	8007d3a <UART_SetConfig+0x8aa>
 8007cdc:	e031      	b.n	8007d42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cde:	f7fd f865 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8007ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ce4:	e033      	b.n	8007d4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce6:	f7fd f877 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8007cea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cec:	e02f      	b.n	8007d4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fcb4 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfc:	e027      	b.n	8007d4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cfe:	f107 0318 	add.w	r3, r7, #24
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fe00 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0c:	e01f      	b.n	8007d4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d0e:	4b2d      	ldr	r3, [pc, #180]	; (8007dc4 <UART_SetConfig+0x934>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d1a:	4b2a      	ldr	r3, [pc, #168]	; (8007dc4 <UART_SetConfig+0x934>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	08db      	lsrs	r3, r3, #3
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	4a24      	ldr	r2, [pc, #144]	; (8007db8 <UART_SetConfig+0x928>)
 8007d26:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d2c:	e00f      	b.n	8007d4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d2e:	4b22      	ldr	r3, [pc, #136]	; (8007db8 <UART_SetConfig+0x928>)
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d32:	e00c      	b.n	8007d4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d34:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <UART_SetConfig+0x92c>)
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d38:	e009      	b.n	8007d4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d40:	e005      	b.n	8007d4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80e7 	beq.w	8007f24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	4a19      	ldr	r2, [pc, #100]	; (8007dc0 <UART_SetConfig+0x930>)
 8007d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d68:	005a      	lsls	r2, r3, #1
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	441a      	add	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	2b0f      	cmp	r3, #15
 8007d80:	d916      	bls.n	8007db0 <UART_SetConfig+0x920>
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d88:	d212      	bcs.n	8007db0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f023 030f 	bic.w	r3, r3, #15
 8007d92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007da2:	4313      	orrs	r3, r2
 8007da4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007dac:	60da      	str	r2, [r3, #12]
 8007dae:	e0b9      	b.n	8007f24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007db6:	e0b5      	b.n	8007f24 <UART_SetConfig+0xa94>
 8007db8:	03d09000 	.word	0x03d09000
 8007dbc:	003d0900 	.word	0x003d0900
 8007dc0:	08009568 	.word	0x08009568
 8007dc4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	dc49      	bgt.n	8007e64 <UART_SetConfig+0x9d4>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	db7c      	blt.n	8007ece <UART_SetConfig+0xa3e>
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d87a      	bhi.n	8007ece <UART_SetConfig+0xa3e>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <UART_SetConfig+0x950>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e6b 	.word	0x08007e6b
 8007de4:	08007e73 	.word	0x08007e73
 8007de8:	08007ecf 	.word	0x08007ecf
 8007dec:	08007ecf 	.word	0x08007ecf
 8007df0:	08007e7b 	.word	0x08007e7b
 8007df4:	08007ecf 	.word	0x08007ecf
 8007df8:	08007ecf 	.word	0x08007ecf
 8007dfc:	08007ecf 	.word	0x08007ecf
 8007e00:	08007e8b 	.word	0x08007e8b
 8007e04:	08007ecf 	.word	0x08007ecf
 8007e08:	08007ecf 	.word	0x08007ecf
 8007e0c:	08007ecf 	.word	0x08007ecf
 8007e10:	08007ecf 	.word	0x08007ecf
 8007e14:	08007ecf 	.word	0x08007ecf
 8007e18:	08007ecf 	.word	0x08007ecf
 8007e1c:	08007ecf 	.word	0x08007ecf
 8007e20:	08007e9b 	.word	0x08007e9b
 8007e24:	08007ecf 	.word	0x08007ecf
 8007e28:	08007ecf 	.word	0x08007ecf
 8007e2c:	08007ecf 	.word	0x08007ecf
 8007e30:	08007ecf 	.word	0x08007ecf
 8007e34:	08007ecf 	.word	0x08007ecf
 8007e38:	08007ecf 	.word	0x08007ecf
 8007e3c:	08007ecf 	.word	0x08007ecf
 8007e40:	08007ecf 	.word	0x08007ecf
 8007e44:	08007ecf 	.word	0x08007ecf
 8007e48:	08007ecf 	.word	0x08007ecf
 8007e4c:	08007ecf 	.word	0x08007ecf
 8007e50:	08007ecf 	.word	0x08007ecf
 8007e54:	08007ecf 	.word	0x08007ecf
 8007e58:	08007ecf 	.word	0x08007ecf
 8007e5c:	08007ecf 	.word	0x08007ecf
 8007e60:	08007ec1 	.word	0x08007ec1
 8007e64:	2b40      	cmp	r3, #64	; 0x40
 8007e66:	d02e      	beq.n	8007ec6 <UART_SetConfig+0xa36>
 8007e68:	e031      	b.n	8007ece <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e6a:	f7fc ff9f 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8007e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e70:	e033      	b.n	8007eda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e72:	f7fc ffb1 	bl	8004dd8 <HAL_RCC_GetPCLK2Freq>
 8007e76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e78:	e02f      	b.n	8007eda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fbee 	bl	8006660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e88:	e027      	b.n	8007eda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e8a:	f107 0318 	add.w	r3, r7, #24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fd3a 	bl	8006908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e98:	e01f      	b.n	8007eda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e9a:	4b2d      	ldr	r3, [pc, #180]	; (8007f50 <UART_SetConfig+0xac0>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ea6:	4b2a      	ldr	r3, [pc, #168]	; (8007f50 <UART_SetConfig+0xac0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	08db      	lsrs	r3, r3, #3
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	4a28      	ldr	r2, [pc, #160]	; (8007f54 <UART_SetConfig+0xac4>)
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007eb8:	e00f      	b.n	8007eda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007eba:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <UART_SetConfig+0xac4>)
 8007ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ebe:	e00c      	b.n	8007eda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ec0:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <UART_SetConfig+0xac8>)
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec4:	e009      	b.n	8007eda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ecc:	e005      	b.n	8007eda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ed8:	bf00      	nop
    }

    if (pclk != 0U)
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d021      	beq.n	8007f24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	; (8007f5c <UART_SetConfig+0xacc>)
 8007ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eee:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	441a      	add	r2, r3
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d909      	bls.n	8007f1e <UART_SetConfig+0xa8e>
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f10:	d205      	bcs.n	8007f1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	e002      	b.n	8007f24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3748      	adds	r7, #72	; 0x48
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4e:	bf00      	nop
 8007f50:	58024400 	.word	0x58024400
 8007f54:	03d09000 	.word	0x03d09000
 8007f58:	003d0900 	.word	0x003d0900
 8007f5c:	08009568 	.word	0x08009568

08007f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00a      	beq.n	8007fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01a      	beq.n	8008076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800805e:	d10a      	bne.n	8008076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	605a      	str	r2, [r3, #4]
  }
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080b4:	f7f9 fa66 	bl	8001584 <HAL_GetTick>
 80080b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d10e      	bne.n	80080e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f82f 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e025      	b.n	8008132 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d10e      	bne.n	8008112 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f819 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e00f      	b.n	8008132 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b09c      	sub	sp, #112	; 0x70
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	603b      	str	r3, [r7, #0]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814a:	e0a9      	b.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	f000 80a5 	beq.w	80082a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7f9 fa15 	bl	8001584 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <UART_WaitOnFlagUntilTimeout+0x32>
 8008166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008168:	2b00      	cmp	r3, #0
 800816a:	d140      	bne.n	80081ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800817a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008180:	667b      	str	r3, [r7, #100]	; 0x64
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800818c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e6      	bne.n	800816c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	663b      	str	r3, [r7, #96]	; 0x60
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081be:	64ba      	str	r2, [r7, #72]	; 0x48
 80081c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e5      	bne.n	800819e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e069      	b.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d051      	beq.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800820a:	d149      	bne.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008214:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800822a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
 8008236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800823a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3308      	adds	r3, #8
 800824e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	613b      	str	r3, [r7, #16]
   return(result);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f023 0301 	bic.w	r3, r3, #1
 800825e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3308      	adds	r3, #8
 8008266:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008268:	623a      	str	r2, [r7, #32]
 800826a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	69f9      	ldr	r1, [r7, #28]
 800826e:	6a3a      	ldr	r2, [r7, #32]
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	61bb      	str	r3, [r7, #24]
   return(result);
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e5      	bne.n	8008248 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2220      	movs	r2, #32
 8008290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e010      	b.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69da      	ldr	r2, [r3, #28]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4013      	ands	r3, r2
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	bf0c      	ite	eq
 80082b0:	2301      	moveq	r3, #1
 80082b2:	2300      	movne	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	f43f af46 	beq.w	800814c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3770      	adds	r7, #112	; 0x70
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b085      	sub	sp, #20
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80082dc:	2302      	movs	r3, #2
 80082de:	e027      	b.n	8008330 <HAL_UARTEx_DisableFifoMode+0x66>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2224      	movs	r2, #36	; 0x24
 80082ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0201 	bic.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800830e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800834c:	2b01      	cmp	r3, #1
 800834e:	d101      	bne.n	8008354 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008350:	2302      	movs	r3, #2
 8008352:	e02d      	b.n	80083b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2224      	movs	r2, #36	; 0x24
 8008360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0201 	bic.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f84f 	bl	8008434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e02d      	b.n	800842c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2224      	movs	r2, #36	; 0x24
 80083dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0201 	bic.w	r2, r2, #1
 80083f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f811 	bl	8008434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008440:	2b00      	cmp	r3, #0
 8008442:	d108      	bne.n	8008456 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008454:	e031      	b.n	80084ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008456:	2310      	movs	r3, #16
 8008458:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800845a:	2310      	movs	r3, #16
 800845c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	0e5b      	lsrs	r3, r3, #25
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	0f5b      	lsrs	r3, r3, #29
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	7b3a      	ldrb	r2, [r7, #12]
 8008482:	4911      	ldr	r1, [pc, #68]	; (80084c8 <UARTEx_SetNbDataToProcess+0x94>)
 8008484:	5c8a      	ldrb	r2, [r1, r2]
 8008486:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800848a:	7b3a      	ldrb	r2, [r7, #12]
 800848c:	490f      	ldr	r1, [pc, #60]	; (80084cc <UARTEx_SetNbDataToProcess+0x98>)
 800848e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008490:	fb93 f3f2 	sdiv	r3, r3, r2
 8008494:	b29a      	uxth	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	7b7a      	ldrb	r2, [r7, #13]
 80084a0:	4909      	ldr	r1, [pc, #36]	; (80084c8 <UARTEx_SetNbDataToProcess+0x94>)
 80084a2:	5c8a      	ldrb	r2, [r1, r2]
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084a8:	7b7a      	ldrb	r2, [r7, #13]
 80084aa:	4908      	ldr	r1, [pc, #32]	; (80084cc <UARTEx_SetNbDataToProcess+0x98>)
 80084ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	08009580 	.word	0x08009580
 80084cc:	08009588 	.word	0x08009588

080084d0 <__errno>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <__errno+0x8>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	24000014 	.word	0x24000014

080084dc <__libc_init_array>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4d0d      	ldr	r5, [pc, #52]	; (8008514 <__libc_init_array+0x38>)
 80084e0:	4c0d      	ldr	r4, [pc, #52]	; (8008518 <__libc_init_array+0x3c>)
 80084e2:	1b64      	subs	r4, r4, r5
 80084e4:	10a4      	asrs	r4, r4, #2
 80084e6:	2600      	movs	r6, #0
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	d109      	bne.n	8008500 <__libc_init_array+0x24>
 80084ec:	4d0b      	ldr	r5, [pc, #44]	; (800851c <__libc_init_array+0x40>)
 80084ee:	4c0c      	ldr	r4, [pc, #48]	; (8008520 <__libc_init_array+0x44>)
 80084f0:	f000 ffbc 	bl	800946c <_init>
 80084f4:	1b64      	subs	r4, r4, r5
 80084f6:	10a4      	asrs	r4, r4, #2
 80084f8:	2600      	movs	r6, #0
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	d105      	bne.n	800850a <__libc_init_array+0x2e>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	f855 3b04 	ldr.w	r3, [r5], #4
 8008504:	4798      	blx	r3
 8008506:	3601      	adds	r6, #1
 8008508:	e7ee      	b.n	80084e8 <__libc_init_array+0xc>
 800850a:	f855 3b04 	ldr.w	r3, [r5], #4
 800850e:	4798      	blx	r3
 8008510:	3601      	adds	r6, #1
 8008512:	e7f2      	b.n	80084fa <__libc_init_array+0x1e>
 8008514:	08009630 	.word	0x08009630
 8008518:	08009630 	.word	0x08009630
 800851c:	08009630 	.word	0x08009630
 8008520:	08009634 	.word	0x08009634

08008524 <memcpy>:
 8008524:	440a      	add	r2, r1
 8008526:	4291      	cmp	r1, r2
 8008528:	f100 33ff 	add.w	r3, r0, #4294967295
 800852c:	d100      	bne.n	8008530 <memcpy+0xc>
 800852e:	4770      	bx	lr
 8008530:	b510      	push	{r4, lr}
 8008532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853a:	4291      	cmp	r1, r2
 800853c:	d1f9      	bne.n	8008532 <memcpy+0xe>
 800853e:	bd10      	pop	{r4, pc}

08008540 <memset>:
 8008540:	4402      	add	r2, r0
 8008542:	4603      	mov	r3, r0
 8008544:	4293      	cmp	r3, r2
 8008546:	d100      	bne.n	800854a <memset+0xa>
 8008548:	4770      	bx	lr
 800854a:	f803 1b01 	strb.w	r1, [r3], #1
 800854e:	e7f9      	b.n	8008544 <memset+0x4>

08008550 <iprintf>:
 8008550:	b40f      	push	{r0, r1, r2, r3}
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <iprintf+0x2c>)
 8008554:	b513      	push	{r0, r1, r4, lr}
 8008556:	681c      	ldr	r4, [r3, #0]
 8008558:	b124      	cbz	r4, 8008564 <iprintf+0x14>
 800855a:	69a3      	ldr	r3, [r4, #24]
 800855c:	b913      	cbnz	r3, 8008564 <iprintf+0x14>
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f866 	bl	8008630 <__sinit>
 8008564:	ab05      	add	r3, sp, #20
 8008566:	9a04      	ldr	r2, [sp, #16]
 8008568:	68a1      	ldr	r1, [r4, #8]
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	4620      	mov	r0, r4
 800856e:	f000 f9bd 	bl	80088ec <_vfiprintf_r>
 8008572:	b002      	add	sp, #8
 8008574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008578:	b004      	add	sp, #16
 800857a:	4770      	bx	lr
 800857c:	24000014 	.word	0x24000014

08008580 <std>:
 8008580:	2300      	movs	r3, #0
 8008582:	b510      	push	{r4, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	e9c0 3300 	strd	r3, r3, [r0]
 800858a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800858e:	6083      	str	r3, [r0, #8]
 8008590:	8181      	strh	r1, [r0, #12]
 8008592:	6643      	str	r3, [r0, #100]	; 0x64
 8008594:	81c2      	strh	r2, [r0, #14]
 8008596:	6183      	str	r3, [r0, #24]
 8008598:	4619      	mov	r1, r3
 800859a:	2208      	movs	r2, #8
 800859c:	305c      	adds	r0, #92	; 0x5c
 800859e:	f7ff ffcf 	bl	8008540 <memset>
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <std+0x38>)
 80085a4:	6263      	str	r3, [r4, #36]	; 0x24
 80085a6:	4b05      	ldr	r3, [pc, #20]	; (80085bc <std+0x3c>)
 80085a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <std+0x40>)
 80085ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x44>)
 80085b0:	6224      	str	r4, [r4, #32]
 80085b2:	6323      	str	r3, [r4, #48]	; 0x30
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	bf00      	nop
 80085b8:	08008e95 	.word	0x08008e95
 80085bc:	08008eb7 	.word	0x08008eb7
 80085c0:	08008eef 	.word	0x08008eef
 80085c4:	08008f13 	.word	0x08008f13

080085c8 <_cleanup_r>:
 80085c8:	4901      	ldr	r1, [pc, #4]	; (80085d0 <_cleanup_r+0x8>)
 80085ca:	f000 b8af 	b.w	800872c <_fwalk_reent>
 80085ce:	bf00      	nop
 80085d0:	080091ed 	.word	0x080091ed

080085d4 <__sfmoreglue>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	2268      	movs	r2, #104	; 0x68
 80085d8:	1e4d      	subs	r5, r1, #1
 80085da:	4355      	muls	r5, r2
 80085dc:	460e      	mov	r6, r1
 80085de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085e2:	f000 f8e5 	bl	80087b0 <_malloc_r>
 80085e6:	4604      	mov	r4, r0
 80085e8:	b140      	cbz	r0, 80085fc <__sfmoreglue+0x28>
 80085ea:	2100      	movs	r1, #0
 80085ec:	e9c0 1600 	strd	r1, r6, [r0]
 80085f0:	300c      	adds	r0, #12
 80085f2:	60a0      	str	r0, [r4, #8]
 80085f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085f8:	f7ff ffa2 	bl	8008540 <memset>
 80085fc:	4620      	mov	r0, r4
 80085fe:	bd70      	pop	{r4, r5, r6, pc}

08008600 <__sfp_lock_acquire>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__sfp_lock_acquire+0x8>)
 8008602:	f000 b8b3 	b.w	800876c <__retarget_lock_acquire_recursive>
 8008606:	bf00      	nop
 8008608:	240002ad 	.word	0x240002ad

0800860c <__sfp_lock_release>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__sfp_lock_release+0x8>)
 800860e:	f000 b8ae 	b.w	800876e <__retarget_lock_release_recursive>
 8008612:	bf00      	nop
 8008614:	240002ad 	.word	0x240002ad

08008618 <__sinit_lock_acquire>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sinit_lock_acquire+0x8>)
 800861a:	f000 b8a7 	b.w	800876c <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	240002ae 	.word	0x240002ae

08008624 <__sinit_lock_release>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sinit_lock_release+0x8>)
 8008626:	f000 b8a2 	b.w	800876e <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	240002ae 	.word	0x240002ae

08008630 <__sinit>:
 8008630:	b510      	push	{r4, lr}
 8008632:	4604      	mov	r4, r0
 8008634:	f7ff fff0 	bl	8008618 <__sinit_lock_acquire>
 8008638:	69a3      	ldr	r3, [r4, #24]
 800863a:	b11b      	cbz	r3, 8008644 <__sinit+0x14>
 800863c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008640:	f7ff bff0 	b.w	8008624 <__sinit_lock_release>
 8008644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008648:	6523      	str	r3, [r4, #80]	; 0x50
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <__sinit+0x68>)
 800864c:	4a13      	ldr	r2, [pc, #76]	; (800869c <__sinit+0x6c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	62a2      	str	r2, [r4, #40]	; 0x28
 8008652:	42a3      	cmp	r3, r4
 8008654:	bf04      	itt	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	61a3      	streq	r3, [r4, #24]
 800865a:	4620      	mov	r0, r4
 800865c:	f000 f820 	bl	80086a0 <__sfp>
 8008660:	6060      	str	r0, [r4, #4]
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f81c 	bl	80086a0 <__sfp>
 8008668:	60a0      	str	r0, [r4, #8]
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f818 	bl	80086a0 <__sfp>
 8008670:	2200      	movs	r2, #0
 8008672:	60e0      	str	r0, [r4, #12]
 8008674:	2104      	movs	r1, #4
 8008676:	6860      	ldr	r0, [r4, #4]
 8008678:	f7ff ff82 	bl	8008580 <std>
 800867c:	68a0      	ldr	r0, [r4, #8]
 800867e:	2201      	movs	r2, #1
 8008680:	2109      	movs	r1, #9
 8008682:	f7ff ff7d 	bl	8008580 <std>
 8008686:	68e0      	ldr	r0, [r4, #12]
 8008688:	2202      	movs	r2, #2
 800868a:	2112      	movs	r1, #18
 800868c:	f7ff ff78 	bl	8008580 <std>
 8008690:	2301      	movs	r3, #1
 8008692:	61a3      	str	r3, [r4, #24]
 8008694:	e7d2      	b.n	800863c <__sinit+0xc>
 8008696:	bf00      	nop
 8008698:	08009590 	.word	0x08009590
 800869c:	080085c9 	.word	0x080085c9

080086a0 <__sfp>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	4607      	mov	r7, r0
 80086a4:	f7ff ffac 	bl	8008600 <__sfp_lock_acquire>
 80086a8:	4b1e      	ldr	r3, [pc, #120]	; (8008724 <__sfp+0x84>)
 80086aa:	681e      	ldr	r6, [r3, #0]
 80086ac:	69b3      	ldr	r3, [r6, #24]
 80086ae:	b913      	cbnz	r3, 80086b6 <__sfp+0x16>
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ffbd 	bl	8008630 <__sinit>
 80086b6:	3648      	adds	r6, #72	; 0x48
 80086b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	d503      	bpl.n	80086c8 <__sfp+0x28>
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	b30b      	cbz	r3, 8008708 <__sfp+0x68>
 80086c4:	6836      	ldr	r6, [r6, #0]
 80086c6:	e7f7      	b.n	80086b8 <__sfp+0x18>
 80086c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086cc:	b9d5      	cbnz	r5, 8008704 <__sfp+0x64>
 80086ce:	4b16      	ldr	r3, [pc, #88]	; (8008728 <__sfp+0x88>)
 80086d0:	60e3      	str	r3, [r4, #12]
 80086d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086d6:	6665      	str	r5, [r4, #100]	; 0x64
 80086d8:	f000 f847 	bl	800876a <__retarget_lock_init_recursive>
 80086dc:	f7ff ff96 	bl	800860c <__sfp_lock_release>
 80086e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086e8:	6025      	str	r5, [r4, #0]
 80086ea:	61a5      	str	r5, [r4, #24]
 80086ec:	2208      	movs	r2, #8
 80086ee:	4629      	mov	r1, r5
 80086f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086f4:	f7ff ff24 	bl	8008540 <memset>
 80086f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008700:	4620      	mov	r0, r4
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008704:	3468      	adds	r4, #104	; 0x68
 8008706:	e7d9      	b.n	80086bc <__sfp+0x1c>
 8008708:	2104      	movs	r1, #4
 800870a:	4638      	mov	r0, r7
 800870c:	f7ff ff62 	bl	80085d4 <__sfmoreglue>
 8008710:	4604      	mov	r4, r0
 8008712:	6030      	str	r0, [r6, #0]
 8008714:	2800      	cmp	r0, #0
 8008716:	d1d5      	bne.n	80086c4 <__sfp+0x24>
 8008718:	f7ff ff78 	bl	800860c <__sfp_lock_release>
 800871c:	230c      	movs	r3, #12
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	e7ee      	b.n	8008700 <__sfp+0x60>
 8008722:	bf00      	nop
 8008724:	08009590 	.word	0x08009590
 8008728:	ffff0001 	.word	0xffff0001

0800872c <_fwalk_reent>:
 800872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008730:	4606      	mov	r6, r0
 8008732:	4688      	mov	r8, r1
 8008734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008738:	2700      	movs	r7, #0
 800873a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800873e:	f1b9 0901 	subs.w	r9, r9, #1
 8008742:	d505      	bpl.n	8008750 <_fwalk_reent+0x24>
 8008744:	6824      	ldr	r4, [r4, #0]
 8008746:	2c00      	cmp	r4, #0
 8008748:	d1f7      	bne.n	800873a <_fwalk_reent+0xe>
 800874a:	4638      	mov	r0, r7
 800874c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008750:	89ab      	ldrh	r3, [r5, #12]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d907      	bls.n	8008766 <_fwalk_reent+0x3a>
 8008756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800875a:	3301      	adds	r3, #1
 800875c:	d003      	beq.n	8008766 <_fwalk_reent+0x3a>
 800875e:	4629      	mov	r1, r5
 8008760:	4630      	mov	r0, r6
 8008762:	47c0      	blx	r8
 8008764:	4307      	orrs	r7, r0
 8008766:	3568      	adds	r5, #104	; 0x68
 8008768:	e7e9      	b.n	800873e <_fwalk_reent+0x12>

0800876a <__retarget_lock_init_recursive>:
 800876a:	4770      	bx	lr

0800876c <__retarget_lock_acquire_recursive>:
 800876c:	4770      	bx	lr

0800876e <__retarget_lock_release_recursive>:
 800876e:	4770      	bx	lr

08008770 <sbrk_aligned>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4e0e      	ldr	r6, [pc, #56]	; (80087ac <sbrk_aligned+0x3c>)
 8008774:	460c      	mov	r4, r1
 8008776:	6831      	ldr	r1, [r6, #0]
 8008778:	4605      	mov	r5, r0
 800877a:	b911      	cbnz	r1, 8008782 <sbrk_aligned+0x12>
 800877c:	f000 fb7a 	bl	8008e74 <_sbrk_r>
 8008780:	6030      	str	r0, [r6, #0]
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 fb75 	bl	8008e74 <_sbrk_r>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	d00a      	beq.n	80087a4 <sbrk_aligned+0x34>
 800878e:	1cc4      	adds	r4, r0, #3
 8008790:	f024 0403 	bic.w	r4, r4, #3
 8008794:	42a0      	cmp	r0, r4
 8008796:	d007      	beq.n	80087a8 <sbrk_aligned+0x38>
 8008798:	1a21      	subs	r1, r4, r0
 800879a:	4628      	mov	r0, r5
 800879c:	f000 fb6a 	bl	8008e74 <_sbrk_r>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d101      	bne.n	80087a8 <sbrk_aligned+0x38>
 80087a4:	f04f 34ff 	mov.w	r4, #4294967295
 80087a8:	4620      	mov	r0, r4
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	240002b4 	.word	0x240002b4

080087b0 <_malloc_r>:
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	1ccd      	adds	r5, r1, #3
 80087b6:	f025 0503 	bic.w	r5, r5, #3
 80087ba:	3508      	adds	r5, #8
 80087bc:	2d0c      	cmp	r5, #12
 80087be:	bf38      	it	cc
 80087c0:	250c      	movcc	r5, #12
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	4607      	mov	r7, r0
 80087c6:	db01      	blt.n	80087cc <_malloc_r+0x1c>
 80087c8:	42a9      	cmp	r1, r5
 80087ca:	d905      	bls.n	80087d8 <_malloc_r+0x28>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	2600      	movs	r6, #0
 80087d2:	4630      	mov	r0, r6
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	4e2e      	ldr	r6, [pc, #184]	; (8008894 <_malloc_r+0xe4>)
 80087da:	f000 fdbb 	bl	8009354 <__malloc_lock>
 80087de:	6833      	ldr	r3, [r6, #0]
 80087e0:	461c      	mov	r4, r3
 80087e2:	bb34      	cbnz	r4, 8008832 <_malloc_r+0x82>
 80087e4:	4629      	mov	r1, r5
 80087e6:	4638      	mov	r0, r7
 80087e8:	f7ff ffc2 	bl	8008770 <sbrk_aligned>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	4604      	mov	r4, r0
 80087f0:	d14d      	bne.n	800888e <_malloc_r+0xde>
 80087f2:	6834      	ldr	r4, [r6, #0]
 80087f4:	4626      	mov	r6, r4
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d140      	bne.n	800887c <_malloc_r+0xcc>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	4631      	mov	r1, r6
 80087fe:	4638      	mov	r0, r7
 8008800:	eb04 0803 	add.w	r8, r4, r3
 8008804:	f000 fb36 	bl	8008e74 <_sbrk_r>
 8008808:	4580      	cmp	r8, r0
 800880a:	d13a      	bne.n	8008882 <_malloc_r+0xd2>
 800880c:	6821      	ldr	r1, [r4, #0]
 800880e:	3503      	adds	r5, #3
 8008810:	1a6d      	subs	r5, r5, r1
 8008812:	f025 0503 	bic.w	r5, r5, #3
 8008816:	3508      	adds	r5, #8
 8008818:	2d0c      	cmp	r5, #12
 800881a:	bf38      	it	cc
 800881c:	250c      	movcc	r5, #12
 800881e:	4629      	mov	r1, r5
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ffa5 	bl	8008770 <sbrk_aligned>
 8008826:	3001      	adds	r0, #1
 8008828:	d02b      	beq.n	8008882 <_malloc_r+0xd2>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	442b      	add	r3, r5
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	e00e      	b.n	8008850 <_malloc_r+0xa0>
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	d41e      	bmi.n	8008876 <_malloc_r+0xc6>
 8008838:	2a0b      	cmp	r2, #11
 800883a:	d916      	bls.n	800886a <_malloc_r+0xba>
 800883c:	1961      	adds	r1, r4, r5
 800883e:	42a3      	cmp	r3, r4
 8008840:	6025      	str	r5, [r4, #0]
 8008842:	bf18      	it	ne
 8008844:	6059      	strne	r1, [r3, #4]
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	bf08      	it	eq
 800884a:	6031      	streq	r1, [r6, #0]
 800884c:	5162      	str	r2, [r4, r5]
 800884e:	604b      	str	r3, [r1, #4]
 8008850:	4638      	mov	r0, r7
 8008852:	f104 060b 	add.w	r6, r4, #11
 8008856:	f000 fd83 	bl	8009360 <__malloc_unlock>
 800885a:	f026 0607 	bic.w	r6, r6, #7
 800885e:	1d23      	adds	r3, r4, #4
 8008860:	1af2      	subs	r2, r6, r3
 8008862:	d0b6      	beq.n	80087d2 <_malloc_r+0x22>
 8008864:	1b9b      	subs	r3, r3, r6
 8008866:	50a3      	str	r3, [r4, r2]
 8008868:	e7b3      	b.n	80087d2 <_malloc_r+0x22>
 800886a:	6862      	ldr	r2, [r4, #4]
 800886c:	42a3      	cmp	r3, r4
 800886e:	bf0c      	ite	eq
 8008870:	6032      	streq	r2, [r6, #0]
 8008872:	605a      	strne	r2, [r3, #4]
 8008874:	e7ec      	b.n	8008850 <_malloc_r+0xa0>
 8008876:	4623      	mov	r3, r4
 8008878:	6864      	ldr	r4, [r4, #4]
 800887a:	e7b2      	b.n	80087e2 <_malloc_r+0x32>
 800887c:	4634      	mov	r4, r6
 800887e:	6876      	ldr	r6, [r6, #4]
 8008880:	e7b9      	b.n	80087f6 <_malloc_r+0x46>
 8008882:	230c      	movs	r3, #12
 8008884:	603b      	str	r3, [r7, #0]
 8008886:	4638      	mov	r0, r7
 8008888:	f000 fd6a 	bl	8009360 <__malloc_unlock>
 800888c:	e7a1      	b.n	80087d2 <_malloc_r+0x22>
 800888e:	6025      	str	r5, [r4, #0]
 8008890:	e7de      	b.n	8008850 <_malloc_r+0xa0>
 8008892:	bf00      	nop
 8008894:	240002b0 	.word	0x240002b0

08008898 <__sfputc_r>:
 8008898:	6893      	ldr	r3, [r2, #8]
 800889a:	3b01      	subs	r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	b410      	push	{r4}
 80088a0:	6093      	str	r3, [r2, #8]
 80088a2:	da08      	bge.n	80088b6 <__sfputc_r+0x1e>
 80088a4:	6994      	ldr	r4, [r2, #24]
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	db01      	blt.n	80088ae <__sfputc_r+0x16>
 80088aa:	290a      	cmp	r1, #10
 80088ac:	d103      	bne.n	80088b6 <__sfputc_r+0x1e>
 80088ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b2:	f000 bb33 	b.w	8008f1c <__swbuf_r>
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	1c58      	adds	r0, r3, #1
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	7019      	strb	r1, [r3, #0]
 80088be:	4608      	mov	r0, r1
 80088c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <__sfputs_r>:
 80088c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	18d5      	adds	r5, r2, r3
 80088d0:	42ac      	cmp	r4, r5
 80088d2:	d101      	bne.n	80088d8 <__sfputs_r+0x12>
 80088d4:	2000      	movs	r0, #0
 80088d6:	e007      	b.n	80088e8 <__sfputs_r+0x22>
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	463a      	mov	r2, r7
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ffda 	bl	8008898 <__sfputc_r>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d1f3      	bne.n	80088d0 <__sfputs_r+0xa>
 80088e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088ec <_vfiprintf_r>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	460d      	mov	r5, r1
 80088f2:	b09d      	sub	sp, #116	; 0x74
 80088f4:	4614      	mov	r4, r2
 80088f6:	4698      	mov	r8, r3
 80088f8:	4606      	mov	r6, r0
 80088fa:	b118      	cbz	r0, 8008904 <_vfiprintf_r+0x18>
 80088fc:	6983      	ldr	r3, [r0, #24]
 80088fe:	b90b      	cbnz	r3, 8008904 <_vfiprintf_r+0x18>
 8008900:	f7ff fe96 	bl	8008630 <__sinit>
 8008904:	4b89      	ldr	r3, [pc, #548]	; (8008b2c <_vfiprintf_r+0x240>)
 8008906:	429d      	cmp	r5, r3
 8008908:	d11b      	bne.n	8008942 <_vfiprintf_r+0x56>
 800890a:	6875      	ldr	r5, [r6, #4]
 800890c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	d405      	bmi.n	800891e <_vfiprintf_r+0x32>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	059a      	lsls	r2, r3, #22
 8008916:	d402      	bmi.n	800891e <_vfiprintf_r+0x32>
 8008918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891a:	f7ff ff27 	bl	800876c <__retarget_lock_acquire_recursive>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	071b      	lsls	r3, r3, #28
 8008922:	d501      	bpl.n	8008928 <_vfiprintf_r+0x3c>
 8008924:	692b      	ldr	r3, [r5, #16]
 8008926:	b9eb      	cbnz	r3, 8008964 <_vfiprintf_r+0x78>
 8008928:	4629      	mov	r1, r5
 800892a:	4630      	mov	r0, r6
 800892c:	f000 fb5a 	bl	8008fe4 <__swsetup_r>
 8008930:	b1c0      	cbz	r0, 8008964 <_vfiprintf_r+0x78>
 8008932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008934:	07dc      	lsls	r4, r3, #31
 8008936:	d50e      	bpl.n	8008956 <_vfiprintf_r+0x6a>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	b01d      	add	sp, #116	; 0x74
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	4b7b      	ldr	r3, [pc, #492]	; (8008b30 <_vfiprintf_r+0x244>)
 8008944:	429d      	cmp	r5, r3
 8008946:	d101      	bne.n	800894c <_vfiprintf_r+0x60>
 8008948:	68b5      	ldr	r5, [r6, #8]
 800894a:	e7df      	b.n	800890c <_vfiprintf_r+0x20>
 800894c:	4b79      	ldr	r3, [pc, #484]	; (8008b34 <_vfiprintf_r+0x248>)
 800894e:	429d      	cmp	r5, r3
 8008950:	bf08      	it	eq
 8008952:	68f5      	ldreq	r5, [r6, #12]
 8008954:	e7da      	b.n	800890c <_vfiprintf_r+0x20>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	0598      	lsls	r0, r3, #22
 800895a:	d4ed      	bmi.n	8008938 <_vfiprintf_r+0x4c>
 800895c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800895e:	f7ff ff06 	bl	800876e <__retarget_lock_release_recursive>
 8008962:	e7e9      	b.n	8008938 <_vfiprintf_r+0x4c>
 8008964:	2300      	movs	r3, #0
 8008966:	9309      	str	r3, [sp, #36]	; 0x24
 8008968:	2320      	movs	r3, #32
 800896a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800896e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008972:	2330      	movs	r3, #48	; 0x30
 8008974:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b38 <_vfiprintf_r+0x24c>
 8008978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800897c:	f04f 0901 	mov.w	r9, #1
 8008980:	4623      	mov	r3, r4
 8008982:	469a      	mov	sl, r3
 8008984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008988:	b10a      	cbz	r2, 800898e <_vfiprintf_r+0xa2>
 800898a:	2a25      	cmp	r2, #37	; 0x25
 800898c:	d1f9      	bne.n	8008982 <_vfiprintf_r+0x96>
 800898e:	ebba 0b04 	subs.w	fp, sl, r4
 8008992:	d00b      	beq.n	80089ac <_vfiprintf_r+0xc0>
 8008994:	465b      	mov	r3, fp
 8008996:	4622      	mov	r2, r4
 8008998:	4629      	mov	r1, r5
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ff93 	bl	80088c6 <__sfputs_r>
 80089a0:	3001      	adds	r0, #1
 80089a2:	f000 80aa 	beq.w	8008afa <_vfiprintf_r+0x20e>
 80089a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a8:	445a      	add	r2, fp
 80089aa:	9209      	str	r2, [sp, #36]	; 0x24
 80089ac:	f89a 3000 	ldrb.w	r3, [sl]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 80a2 	beq.w	8008afa <_vfiprintf_r+0x20e>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f04f 32ff 	mov.w	r2, #4294967295
 80089bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c0:	f10a 0a01 	add.w	sl, sl, #1
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	9307      	str	r3, [sp, #28]
 80089c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089cc:	931a      	str	r3, [sp, #104]	; 0x68
 80089ce:	4654      	mov	r4, sl
 80089d0:	2205      	movs	r2, #5
 80089d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d6:	4858      	ldr	r0, [pc, #352]	; (8008b38 <_vfiprintf_r+0x24c>)
 80089d8:	f7f7 fc82 	bl	80002e0 <memchr>
 80089dc:	9a04      	ldr	r2, [sp, #16]
 80089de:	b9d8      	cbnz	r0, 8008a18 <_vfiprintf_r+0x12c>
 80089e0:	06d1      	lsls	r1, r2, #27
 80089e2:	bf44      	itt	mi
 80089e4:	2320      	movmi	r3, #32
 80089e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ea:	0713      	lsls	r3, r2, #28
 80089ec:	bf44      	itt	mi
 80089ee:	232b      	movmi	r3, #43	; 0x2b
 80089f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f4:	f89a 3000 	ldrb.w	r3, [sl]
 80089f8:	2b2a      	cmp	r3, #42	; 0x2a
 80089fa:	d015      	beq.n	8008a28 <_vfiprintf_r+0x13c>
 80089fc:	9a07      	ldr	r2, [sp, #28]
 80089fe:	4654      	mov	r4, sl
 8008a00:	2000      	movs	r0, #0
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4621      	mov	r1, r4
 8008a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a0c:	3b30      	subs	r3, #48	; 0x30
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d94e      	bls.n	8008ab0 <_vfiprintf_r+0x1c4>
 8008a12:	b1b0      	cbz	r0, 8008a42 <_vfiprintf_r+0x156>
 8008a14:	9207      	str	r2, [sp, #28]
 8008a16:	e014      	b.n	8008a42 <_vfiprintf_r+0x156>
 8008a18:	eba0 0308 	sub.w	r3, r0, r8
 8008a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	46a2      	mov	sl, r4
 8008a26:	e7d2      	b.n	80089ce <_vfiprintf_r+0xe2>
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	1d19      	adds	r1, r3, #4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	9103      	str	r1, [sp, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bfbb      	ittet	lt
 8008a34:	425b      	neglt	r3, r3
 8008a36:	f042 0202 	orrlt.w	r2, r2, #2
 8008a3a:	9307      	strge	r3, [sp, #28]
 8008a3c:	9307      	strlt	r3, [sp, #28]
 8008a3e:	bfb8      	it	lt
 8008a40:	9204      	strlt	r2, [sp, #16]
 8008a42:	7823      	ldrb	r3, [r4, #0]
 8008a44:	2b2e      	cmp	r3, #46	; 0x2e
 8008a46:	d10c      	bne.n	8008a62 <_vfiprintf_r+0x176>
 8008a48:	7863      	ldrb	r3, [r4, #1]
 8008a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4c:	d135      	bne.n	8008aba <_vfiprintf_r+0x1ce>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	1d1a      	adds	r2, r3, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	9203      	str	r2, [sp, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bfb8      	it	lt
 8008a5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a5e:	3402      	adds	r4, #2
 8008a60:	9305      	str	r3, [sp, #20]
 8008a62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b48 <_vfiprintf_r+0x25c>
 8008a66:	7821      	ldrb	r1, [r4, #0]
 8008a68:	2203      	movs	r2, #3
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	f7f7 fc38 	bl	80002e0 <memchr>
 8008a70:	b140      	cbz	r0, 8008a84 <_vfiprintf_r+0x198>
 8008a72:	2340      	movs	r3, #64	; 0x40
 8008a74:	eba0 000a 	sub.w	r0, r0, sl
 8008a78:	fa03 f000 	lsl.w	r0, r3, r0
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	4303      	orrs	r3, r0
 8008a80:	3401      	adds	r4, #1
 8008a82:	9304      	str	r3, [sp, #16]
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	482c      	ldr	r0, [pc, #176]	; (8008b3c <_vfiprintf_r+0x250>)
 8008a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a8e:	2206      	movs	r2, #6
 8008a90:	f7f7 fc26 	bl	80002e0 <memchr>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d03f      	beq.n	8008b18 <_vfiprintf_r+0x22c>
 8008a98:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <_vfiprintf_r+0x254>)
 8008a9a:	bb1b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x1f8>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	3307      	adds	r3, #7
 8008aa0:	f023 0307 	bic.w	r3, r3, #7
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	9303      	str	r3, [sp, #12]
 8008aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aaa:	443b      	add	r3, r7
 8008aac:	9309      	str	r3, [sp, #36]	; 0x24
 8008aae:	e767      	b.n	8008980 <_vfiprintf_r+0x94>
 8008ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	e7a5      	b.n	8008a06 <_vfiprintf_r+0x11a>
 8008aba:	2300      	movs	r3, #0
 8008abc:	3401      	adds	r4, #1
 8008abe:	9305      	str	r3, [sp, #20]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f04f 0c0a 	mov.w	ip, #10
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008acc:	3a30      	subs	r2, #48	; 0x30
 8008ace:	2a09      	cmp	r2, #9
 8008ad0:	d903      	bls.n	8008ada <_vfiprintf_r+0x1ee>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0c5      	beq.n	8008a62 <_vfiprintf_r+0x176>
 8008ad6:	9105      	str	r1, [sp, #20]
 8008ad8:	e7c3      	b.n	8008a62 <_vfiprintf_r+0x176>
 8008ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ade:	4604      	mov	r4, r0
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e7f0      	b.n	8008ac6 <_vfiprintf_r+0x1da>
 8008ae4:	ab03      	add	r3, sp, #12
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4b16      	ldr	r3, [pc, #88]	; (8008b44 <_vfiprintf_r+0x258>)
 8008aec:	a904      	add	r1, sp, #16
 8008aee:	4630      	mov	r0, r6
 8008af0:	f3af 8000 	nop.w
 8008af4:	4607      	mov	r7, r0
 8008af6:	1c78      	adds	r0, r7, #1
 8008af8:	d1d6      	bne.n	8008aa8 <_vfiprintf_r+0x1bc>
 8008afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008afc:	07d9      	lsls	r1, r3, #31
 8008afe:	d405      	bmi.n	8008b0c <_vfiprintf_r+0x220>
 8008b00:	89ab      	ldrh	r3, [r5, #12]
 8008b02:	059a      	lsls	r2, r3, #22
 8008b04:	d402      	bmi.n	8008b0c <_vfiprintf_r+0x220>
 8008b06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b08:	f7ff fe31 	bl	800876e <__retarget_lock_release_recursive>
 8008b0c:	89ab      	ldrh	r3, [r5, #12]
 8008b0e:	065b      	lsls	r3, r3, #25
 8008b10:	f53f af12 	bmi.w	8008938 <_vfiprintf_r+0x4c>
 8008b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b16:	e711      	b.n	800893c <_vfiprintf_r+0x50>
 8008b18:	ab03      	add	r3, sp, #12
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <_vfiprintf_r+0x258>)
 8008b20:	a904      	add	r1, sp, #16
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 f880 	bl	8008c28 <_printf_i>
 8008b28:	e7e4      	b.n	8008af4 <_vfiprintf_r+0x208>
 8008b2a:	bf00      	nop
 8008b2c:	080095b4 	.word	0x080095b4
 8008b30:	080095d4 	.word	0x080095d4
 8008b34:	08009594 	.word	0x08009594
 8008b38:	080095f4 	.word	0x080095f4
 8008b3c:	080095fe 	.word	0x080095fe
 8008b40:	00000000 	.word	0x00000000
 8008b44:	080088c7 	.word	0x080088c7
 8008b48:	080095fa 	.word	0x080095fa

08008b4c <_printf_common>:
 8008b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	4616      	mov	r6, r2
 8008b52:	4699      	mov	r9, r3
 8008b54:	688a      	ldr	r2, [r1, #8]
 8008b56:	690b      	ldr	r3, [r1, #16]
 8008b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	bfb8      	it	lt
 8008b60:	4613      	movlt	r3, r2
 8008b62:	6033      	str	r3, [r6, #0]
 8008b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b68:	4607      	mov	r7, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	b10a      	cbz	r2, 8008b72 <_printf_common+0x26>
 8008b6e:	3301      	adds	r3, #1
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	0699      	lsls	r1, r3, #26
 8008b76:	bf42      	ittt	mi
 8008b78:	6833      	ldrmi	r3, [r6, #0]
 8008b7a:	3302      	addmi	r3, #2
 8008b7c:	6033      	strmi	r3, [r6, #0]
 8008b7e:	6825      	ldr	r5, [r4, #0]
 8008b80:	f015 0506 	ands.w	r5, r5, #6
 8008b84:	d106      	bne.n	8008b94 <_printf_common+0x48>
 8008b86:	f104 0a19 	add.w	sl, r4, #25
 8008b8a:	68e3      	ldr	r3, [r4, #12]
 8008b8c:	6832      	ldr	r2, [r6, #0]
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	42ab      	cmp	r3, r5
 8008b92:	dc26      	bgt.n	8008be2 <_printf_common+0x96>
 8008b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b98:	1e13      	subs	r3, r2, #0
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	bf18      	it	ne
 8008b9e:	2301      	movne	r3, #1
 8008ba0:	0692      	lsls	r2, r2, #26
 8008ba2:	d42b      	bmi.n	8008bfc <_printf_common+0xb0>
 8008ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4638      	mov	r0, r7
 8008bac:	47c0      	blx	r8
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d01e      	beq.n	8008bf0 <_printf_common+0xa4>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	68e5      	ldr	r5, [r4, #12]
 8008bb6:	6832      	ldr	r2, [r6, #0]
 8008bb8:	f003 0306 	and.w	r3, r3, #6
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	bf08      	it	eq
 8008bc0:	1aad      	subeq	r5, r5, r2
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	6922      	ldr	r2, [r4, #16]
 8008bc6:	bf0c      	ite	eq
 8008bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bcc:	2500      	movne	r5, #0
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	bfc4      	itt	gt
 8008bd2:	1a9b      	subgt	r3, r3, r2
 8008bd4:	18ed      	addgt	r5, r5, r3
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	341a      	adds	r4, #26
 8008bda:	42b5      	cmp	r5, r6
 8008bdc:	d11a      	bne.n	8008c14 <_printf_common+0xc8>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e008      	b.n	8008bf4 <_printf_common+0xa8>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4652      	mov	r2, sl
 8008be6:	4649      	mov	r1, r9
 8008be8:	4638      	mov	r0, r7
 8008bea:	47c0      	blx	r8
 8008bec:	3001      	adds	r0, #1
 8008bee:	d103      	bne.n	8008bf8 <_printf_common+0xac>
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf8:	3501      	adds	r5, #1
 8008bfa:	e7c6      	b.n	8008b8a <_printf_common+0x3e>
 8008bfc:	18e1      	adds	r1, r4, r3
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	2030      	movs	r0, #48	; 0x30
 8008c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c06:	4422      	add	r2, r4
 8008c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c10:	3302      	adds	r3, #2
 8008c12:	e7c7      	b.n	8008ba4 <_printf_common+0x58>
 8008c14:	2301      	movs	r3, #1
 8008c16:	4622      	mov	r2, r4
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	47c0      	blx	r8
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d0e6      	beq.n	8008bf0 <_printf_common+0xa4>
 8008c22:	3601      	adds	r6, #1
 8008c24:	e7d9      	b.n	8008bda <_printf_common+0x8e>
	...

08008c28 <_printf_i>:
 8008c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	7e0f      	ldrb	r7, [r1, #24]
 8008c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c30:	2f78      	cmp	r7, #120	; 0x78
 8008c32:	4691      	mov	r9, r2
 8008c34:	4680      	mov	r8, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	469a      	mov	sl, r3
 8008c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c3e:	d807      	bhi.n	8008c50 <_printf_i+0x28>
 8008c40:	2f62      	cmp	r7, #98	; 0x62
 8008c42:	d80a      	bhi.n	8008c5a <_printf_i+0x32>
 8008c44:	2f00      	cmp	r7, #0
 8008c46:	f000 80d8 	beq.w	8008dfa <_printf_i+0x1d2>
 8008c4a:	2f58      	cmp	r7, #88	; 0x58
 8008c4c:	f000 80a3 	beq.w	8008d96 <_printf_i+0x16e>
 8008c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c58:	e03a      	b.n	8008cd0 <_printf_i+0xa8>
 8008c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c5e:	2b15      	cmp	r3, #21
 8008c60:	d8f6      	bhi.n	8008c50 <_printf_i+0x28>
 8008c62:	a101      	add	r1, pc, #4	; (adr r1, 8008c68 <_printf_i+0x40>)
 8008c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c68:	08008cc1 	.word	0x08008cc1
 8008c6c:	08008cd5 	.word	0x08008cd5
 8008c70:	08008c51 	.word	0x08008c51
 8008c74:	08008c51 	.word	0x08008c51
 8008c78:	08008c51 	.word	0x08008c51
 8008c7c:	08008c51 	.word	0x08008c51
 8008c80:	08008cd5 	.word	0x08008cd5
 8008c84:	08008c51 	.word	0x08008c51
 8008c88:	08008c51 	.word	0x08008c51
 8008c8c:	08008c51 	.word	0x08008c51
 8008c90:	08008c51 	.word	0x08008c51
 8008c94:	08008de1 	.word	0x08008de1
 8008c98:	08008d05 	.word	0x08008d05
 8008c9c:	08008dc3 	.word	0x08008dc3
 8008ca0:	08008c51 	.word	0x08008c51
 8008ca4:	08008c51 	.word	0x08008c51
 8008ca8:	08008e03 	.word	0x08008e03
 8008cac:	08008c51 	.word	0x08008c51
 8008cb0:	08008d05 	.word	0x08008d05
 8008cb4:	08008c51 	.word	0x08008c51
 8008cb8:	08008c51 	.word	0x08008c51
 8008cbc:	08008dcb 	.word	0x08008dcb
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	1d1a      	adds	r2, r3, #4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	602a      	str	r2, [r5, #0]
 8008cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e0a3      	b.n	8008e1c <_printf_i+0x1f4>
 8008cd4:	6820      	ldr	r0, [r4, #0]
 8008cd6:	6829      	ldr	r1, [r5, #0]
 8008cd8:	0606      	lsls	r6, r0, #24
 8008cda:	f101 0304 	add.w	r3, r1, #4
 8008cde:	d50a      	bpl.n	8008cf6 <_printf_i+0xce>
 8008ce0:	680e      	ldr	r6, [r1, #0]
 8008ce2:	602b      	str	r3, [r5, #0]
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	da03      	bge.n	8008cf0 <_printf_i+0xc8>
 8008ce8:	232d      	movs	r3, #45	; 0x2d
 8008cea:	4276      	negs	r6, r6
 8008cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf0:	485e      	ldr	r0, [pc, #376]	; (8008e6c <_printf_i+0x244>)
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	e019      	b.n	8008d2a <_printf_i+0x102>
 8008cf6:	680e      	ldr	r6, [r1, #0]
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cfe:	bf18      	it	ne
 8008d00:	b236      	sxthne	r6, r6
 8008d02:	e7ef      	b.n	8008ce4 <_printf_i+0xbc>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	6820      	ldr	r0, [r4, #0]
 8008d08:	1d19      	adds	r1, r3, #4
 8008d0a:	6029      	str	r1, [r5, #0]
 8008d0c:	0601      	lsls	r1, r0, #24
 8008d0e:	d501      	bpl.n	8008d14 <_printf_i+0xec>
 8008d10:	681e      	ldr	r6, [r3, #0]
 8008d12:	e002      	b.n	8008d1a <_printf_i+0xf2>
 8008d14:	0646      	lsls	r6, r0, #25
 8008d16:	d5fb      	bpl.n	8008d10 <_printf_i+0xe8>
 8008d18:	881e      	ldrh	r6, [r3, #0]
 8008d1a:	4854      	ldr	r0, [pc, #336]	; (8008e6c <_printf_i+0x244>)
 8008d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d1e:	bf0c      	ite	eq
 8008d20:	2308      	moveq	r3, #8
 8008d22:	230a      	movne	r3, #10
 8008d24:	2100      	movs	r1, #0
 8008d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d2a:	6865      	ldr	r5, [r4, #4]
 8008d2c:	60a5      	str	r5, [r4, #8]
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	bfa2      	ittt	ge
 8008d32:	6821      	ldrge	r1, [r4, #0]
 8008d34:	f021 0104 	bicge.w	r1, r1, #4
 8008d38:	6021      	strge	r1, [r4, #0]
 8008d3a:	b90e      	cbnz	r6, 8008d40 <_printf_i+0x118>
 8008d3c:	2d00      	cmp	r5, #0
 8008d3e:	d04d      	beq.n	8008ddc <_printf_i+0x1b4>
 8008d40:	4615      	mov	r5, r2
 8008d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d46:	fb03 6711 	mls	r7, r3, r1, r6
 8008d4a:	5dc7      	ldrb	r7, [r0, r7]
 8008d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d50:	4637      	mov	r7, r6
 8008d52:	42bb      	cmp	r3, r7
 8008d54:	460e      	mov	r6, r1
 8008d56:	d9f4      	bls.n	8008d42 <_printf_i+0x11a>
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d10b      	bne.n	8008d74 <_printf_i+0x14c>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	07de      	lsls	r6, r3, #31
 8008d60:	d508      	bpl.n	8008d74 <_printf_i+0x14c>
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	6861      	ldr	r1, [r4, #4]
 8008d66:	4299      	cmp	r1, r3
 8008d68:	bfde      	ittt	le
 8008d6a:	2330      	movle	r3, #48	; 0x30
 8008d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d74:	1b52      	subs	r2, r2, r5
 8008d76:	6122      	str	r2, [r4, #16]
 8008d78:	f8cd a000 	str.w	sl, [sp]
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	aa03      	add	r2, sp, #12
 8008d80:	4621      	mov	r1, r4
 8008d82:	4640      	mov	r0, r8
 8008d84:	f7ff fee2 	bl	8008b4c <_printf_common>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d14c      	bne.n	8008e26 <_printf_i+0x1fe>
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	b004      	add	sp, #16
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	4835      	ldr	r0, [pc, #212]	; (8008e6c <_printf_i+0x244>)
 8008d98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d9c:	6829      	ldr	r1, [r5, #0]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008da4:	6029      	str	r1, [r5, #0]
 8008da6:	061d      	lsls	r5, r3, #24
 8008da8:	d514      	bpl.n	8008dd4 <_printf_i+0x1ac>
 8008daa:	07df      	lsls	r7, r3, #31
 8008dac:	bf44      	itt	mi
 8008dae:	f043 0320 	orrmi.w	r3, r3, #32
 8008db2:	6023      	strmi	r3, [r4, #0]
 8008db4:	b91e      	cbnz	r6, 8008dbe <_printf_i+0x196>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	f023 0320 	bic.w	r3, r3, #32
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	e7b0      	b.n	8008d24 <_printf_i+0xfc>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	f043 0320 	orr.w	r3, r3, #32
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	2378      	movs	r3, #120	; 0x78
 8008dcc:	4828      	ldr	r0, [pc, #160]	; (8008e70 <_printf_i+0x248>)
 8008dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dd2:	e7e3      	b.n	8008d9c <_printf_i+0x174>
 8008dd4:	0659      	lsls	r1, r3, #25
 8008dd6:	bf48      	it	mi
 8008dd8:	b2b6      	uxthmi	r6, r6
 8008dda:	e7e6      	b.n	8008daa <_printf_i+0x182>
 8008ddc:	4615      	mov	r5, r2
 8008dde:	e7bb      	b.n	8008d58 <_printf_i+0x130>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	6826      	ldr	r6, [r4, #0]
 8008de4:	6961      	ldr	r1, [r4, #20]
 8008de6:	1d18      	adds	r0, r3, #4
 8008de8:	6028      	str	r0, [r5, #0]
 8008dea:	0635      	lsls	r5, r6, #24
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	d501      	bpl.n	8008df4 <_printf_i+0x1cc>
 8008df0:	6019      	str	r1, [r3, #0]
 8008df2:	e002      	b.n	8008dfa <_printf_i+0x1d2>
 8008df4:	0670      	lsls	r0, r6, #25
 8008df6:	d5fb      	bpl.n	8008df0 <_printf_i+0x1c8>
 8008df8:	8019      	strh	r1, [r3, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	4615      	mov	r5, r2
 8008e00:	e7ba      	b.n	8008d78 <_printf_i+0x150>
 8008e02:	682b      	ldr	r3, [r5, #0]
 8008e04:	1d1a      	adds	r2, r3, #4
 8008e06:	602a      	str	r2, [r5, #0]
 8008e08:	681d      	ldr	r5, [r3, #0]
 8008e0a:	6862      	ldr	r2, [r4, #4]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7f7 fa66 	bl	80002e0 <memchr>
 8008e14:	b108      	cbz	r0, 8008e1a <_printf_i+0x1f2>
 8008e16:	1b40      	subs	r0, r0, r5
 8008e18:	6060      	str	r0, [r4, #4]
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e24:	e7a8      	b.n	8008d78 <_printf_i+0x150>
 8008e26:	6923      	ldr	r3, [r4, #16]
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	47d0      	blx	sl
 8008e30:	3001      	adds	r0, #1
 8008e32:	d0ab      	beq.n	8008d8c <_printf_i+0x164>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	079b      	lsls	r3, r3, #30
 8008e38:	d413      	bmi.n	8008e62 <_printf_i+0x23a>
 8008e3a:	68e0      	ldr	r0, [r4, #12]
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	4298      	cmp	r0, r3
 8008e40:	bfb8      	it	lt
 8008e42:	4618      	movlt	r0, r3
 8008e44:	e7a4      	b.n	8008d90 <_printf_i+0x168>
 8008e46:	2301      	movs	r3, #1
 8008e48:	4632      	mov	r2, r6
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	47d0      	blx	sl
 8008e50:	3001      	adds	r0, #1
 8008e52:	d09b      	beq.n	8008d8c <_printf_i+0x164>
 8008e54:	3501      	adds	r5, #1
 8008e56:	68e3      	ldr	r3, [r4, #12]
 8008e58:	9903      	ldr	r1, [sp, #12]
 8008e5a:	1a5b      	subs	r3, r3, r1
 8008e5c:	42ab      	cmp	r3, r5
 8008e5e:	dcf2      	bgt.n	8008e46 <_printf_i+0x21e>
 8008e60:	e7eb      	b.n	8008e3a <_printf_i+0x212>
 8008e62:	2500      	movs	r5, #0
 8008e64:	f104 0619 	add.w	r6, r4, #25
 8008e68:	e7f5      	b.n	8008e56 <_printf_i+0x22e>
 8008e6a:	bf00      	nop
 8008e6c:	08009605 	.word	0x08009605
 8008e70:	08009616 	.word	0x08009616

08008e74 <_sbrk_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	; (8008e90 <_sbrk_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 fa9a 	bl	80013b8 <_sbrk>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_sbrk_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_sbrk_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	240002b8 	.word	0x240002b8

08008e94 <__sread>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	460c      	mov	r4, r1
 8008e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9c:	f000 fab2 	bl	8009404 <_read_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	bfab      	itete	ge
 8008ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ea8:	181b      	addge	r3, r3, r0
 8008eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eae:	bfac      	ite	ge
 8008eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eb2:	81a3      	strhlt	r3, [r4, #12]
 8008eb4:	bd10      	pop	{r4, pc}

08008eb6 <__swrite>:
 8008eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	461f      	mov	r7, r3
 8008ebc:	898b      	ldrh	r3, [r1, #12]
 8008ebe:	05db      	lsls	r3, r3, #23
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	d505      	bpl.n	8008ed4 <__swrite+0x1e>
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	2302      	movs	r3, #2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f000 f9c8 	bl	8009264 <_lseek_r>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eea:	f000 b869 	b.w	8008fc0 <_write_r>

08008eee <__sseek>:
 8008eee:	b510      	push	{r4, lr}
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef6:	f000 f9b5 	bl	8009264 <_lseek_r>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	bf15      	itete	ne
 8008f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f0a:	81a3      	strheq	r3, [r4, #12]
 8008f0c:	bf18      	it	ne
 8008f0e:	81a3      	strhne	r3, [r4, #12]
 8008f10:	bd10      	pop	{r4, pc}

08008f12 <__sclose>:
 8008f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f16:	f000 b8d3 	b.w	80090c0 <_close_r>
	...

08008f1c <__swbuf_r>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	460e      	mov	r6, r1
 8008f20:	4614      	mov	r4, r2
 8008f22:	4605      	mov	r5, r0
 8008f24:	b118      	cbz	r0, 8008f2e <__swbuf_r+0x12>
 8008f26:	6983      	ldr	r3, [r0, #24]
 8008f28:	b90b      	cbnz	r3, 8008f2e <__swbuf_r+0x12>
 8008f2a:	f7ff fb81 	bl	8008630 <__sinit>
 8008f2e:	4b21      	ldr	r3, [pc, #132]	; (8008fb4 <__swbuf_r+0x98>)
 8008f30:	429c      	cmp	r4, r3
 8008f32:	d12b      	bne.n	8008f8c <__swbuf_r+0x70>
 8008f34:	686c      	ldr	r4, [r5, #4]
 8008f36:	69a3      	ldr	r3, [r4, #24]
 8008f38:	60a3      	str	r3, [r4, #8]
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	071a      	lsls	r2, r3, #28
 8008f3e:	d52f      	bpl.n	8008fa0 <__swbuf_r+0x84>
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	b36b      	cbz	r3, 8008fa0 <__swbuf_r+0x84>
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	6820      	ldr	r0, [r4, #0]
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	6963      	ldr	r3, [r4, #20]
 8008f4c:	b2f6      	uxtb	r6, r6
 8008f4e:	4283      	cmp	r3, r0
 8008f50:	4637      	mov	r7, r6
 8008f52:	dc04      	bgt.n	8008f5e <__swbuf_r+0x42>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f948 	bl	80091ec <_fflush_r>
 8008f5c:	bb30      	cbnz	r0, 8008fac <__swbuf_r+0x90>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	60a3      	str	r3, [r4, #8]
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	6022      	str	r2, [r4, #0]
 8008f6a:	701e      	strb	r6, [r3, #0]
 8008f6c:	6963      	ldr	r3, [r4, #20]
 8008f6e:	3001      	adds	r0, #1
 8008f70:	4283      	cmp	r3, r0
 8008f72:	d004      	beq.n	8008f7e <__swbuf_r+0x62>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	07db      	lsls	r3, r3, #31
 8008f78:	d506      	bpl.n	8008f88 <__swbuf_r+0x6c>
 8008f7a:	2e0a      	cmp	r6, #10
 8008f7c:	d104      	bne.n	8008f88 <__swbuf_r+0x6c>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f000 f933 	bl	80091ec <_fflush_r>
 8008f86:	b988      	cbnz	r0, 8008fac <__swbuf_r+0x90>
 8008f88:	4638      	mov	r0, r7
 8008f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <__swbuf_r+0x9c>)
 8008f8e:	429c      	cmp	r4, r3
 8008f90:	d101      	bne.n	8008f96 <__swbuf_r+0x7a>
 8008f92:	68ac      	ldr	r4, [r5, #8]
 8008f94:	e7cf      	b.n	8008f36 <__swbuf_r+0x1a>
 8008f96:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <__swbuf_r+0xa0>)
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	bf08      	it	eq
 8008f9c:	68ec      	ldreq	r4, [r5, #12]
 8008f9e:	e7ca      	b.n	8008f36 <__swbuf_r+0x1a>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 f81e 	bl	8008fe4 <__swsetup_r>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d0cb      	beq.n	8008f44 <__swbuf_r+0x28>
 8008fac:	f04f 37ff 	mov.w	r7, #4294967295
 8008fb0:	e7ea      	b.n	8008f88 <__swbuf_r+0x6c>
 8008fb2:	bf00      	nop
 8008fb4:	080095b4 	.word	0x080095b4
 8008fb8:	080095d4 	.word	0x080095d4
 8008fbc:	08009594 	.word	0x08009594

08008fc0 <_write_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <_write_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f8 f9a1 	bl	8001316 <_write>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_write_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_write_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	240002b8 	.word	0x240002b8

08008fe4 <__swsetup_r>:
 8008fe4:	4b32      	ldr	r3, [pc, #200]	; (80090b0 <__swsetup_r+0xcc>)
 8008fe6:	b570      	push	{r4, r5, r6, lr}
 8008fe8:	681d      	ldr	r5, [r3, #0]
 8008fea:	4606      	mov	r6, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	b125      	cbz	r5, 8008ffa <__swsetup_r+0x16>
 8008ff0:	69ab      	ldr	r3, [r5, #24]
 8008ff2:	b913      	cbnz	r3, 8008ffa <__swsetup_r+0x16>
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f7ff fb1b 	bl	8008630 <__sinit>
 8008ffa:	4b2e      	ldr	r3, [pc, #184]	; (80090b4 <__swsetup_r+0xd0>)
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	d10f      	bne.n	8009020 <__swsetup_r+0x3c>
 8009000:	686c      	ldr	r4, [r5, #4]
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009008:	0719      	lsls	r1, r3, #28
 800900a:	d42c      	bmi.n	8009066 <__swsetup_r+0x82>
 800900c:	06dd      	lsls	r5, r3, #27
 800900e:	d411      	bmi.n	8009034 <__swsetup_r+0x50>
 8009010:	2309      	movs	r3, #9
 8009012:	6033      	str	r3, [r6, #0]
 8009014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	f04f 30ff 	mov.w	r0, #4294967295
 800901e:	e03e      	b.n	800909e <__swsetup_r+0xba>
 8009020:	4b25      	ldr	r3, [pc, #148]	; (80090b8 <__swsetup_r+0xd4>)
 8009022:	429c      	cmp	r4, r3
 8009024:	d101      	bne.n	800902a <__swsetup_r+0x46>
 8009026:	68ac      	ldr	r4, [r5, #8]
 8009028:	e7eb      	b.n	8009002 <__swsetup_r+0x1e>
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <__swsetup_r+0xd8>)
 800902c:	429c      	cmp	r4, r3
 800902e:	bf08      	it	eq
 8009030:	68ec      	ldreq	r4, [r5, #12]
 8009032:	e7e6      	b.n	8009002 <__swsetup_r+0x1e>
 8009034:	0758      	lsls	r0, r3, #29
 8009036:	d512      	bpl.n	800905e <__swsetup_r+0x7a>
 8009038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800903a:	b141      	cbz	r1, 800904e <__swsetup_r+0x6a>
 800903c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009040:	4299      	cmp	r1, r3
 8009042:	d002      	beq.n	800904a <__swsetup_r+0x66>
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f991 	bl	800936c <_free_r>
 800904a:	2300      	movs	r3, #0
 800904c:	6363      	str	r3, [r4, #52]	; 0x34
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	2300      	movs	r3, #0
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f043 0308 	orr.w	r3, r3, #8
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	b94b      	cbnz	r3, 800907e <__swsetup_r+0x9a>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009074:	d003      	beq.n	800907e <__swsetup_r+0x9a>
 8009076:	4621      	mov	r1, r4
 8009078:	4630      	mov	r0, r6
 800907a:	f000 f92b 	bl	80092d4 <__smakebuf_r>
 800907e:	89a0      	ldrh	r0, [r4, #12]
 8009080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009084:	f010 0301 	ands.w	r3, r0, #1
 8009088:	d00a      	beq.n	80090a0 <__swsetup_r+0xbc>
 800908a:	2300      	movs	r3, #0
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	6963      	ldr	r3, [r4, #20]
 8009090:	425b      	negs	r3, r3
 8009092:	61a3      	str	r3, [r4, #24]
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	b943      	cbnz	r3, 80090aa <__swsetup_r+0xc6>
 8009098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800909c:	d1ba      	bne.n	8009014 <__swsetup_r+0x30>
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	0781      	lsls	r1, r0, #30
 80090a2:	bf58      	it	pl
 80090a4:	6963      	ldrpl	r3, [r4, #20]
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	e7f4      	b.n	8009094 <__swsetup_r+0xb0>
 80090aa:	2000      	movs	r0, #0
 80090ac:	e7f7      	b.n	800909e <__swsetup_r+0xba>
 80090ae:	bf00      	nop
 80090b0:	24000014 	.word	0x24000014
 80090b4:	080095b4 	.word	0x080095b4
 80090b8:	080095d4 	.word	0x080095d4
 80090bc:	08009594 	.word	0x08009594

080090c0 <_close_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	; (80090dc <_close_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f8 f93f 	bl	800134e <_close>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_close_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_close_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	240002b8 	.word	0x240002b8

080090e0 <__sflush_r>:
 80090e0:	898a      	ldrh	r2, [r1, #12]
 80090e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e6:	4605      	mov	r5, r0
 80090e8:	0710      	lsls	r0, r2, #28
 80090ea:	460c      	mov	r4, r1
 80090ec:	d458      	bmi.n	80091a0 <__sflush_r+0xc0>
 80090ee:	684b      	ldr	r3, [r1, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dc05      	bgt.n	8009100 <__sflush_r+0x20>
 80090f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dc02      	bgt.n	8009100 <__sflush_r+0x20>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009102:	2e00      	cmp	r6, #0
 8009104:	d0f9      	beq.n	80090fa <__sflush_r+0x1a>
 8009106:	2300      	movs	r3, #0
 8009108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800910c:	682f      	ldr	r7, [r5, #0]
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	d032      	beq.n	8009178 <__sflush_r+0x98>
 8009112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	075a      	lsls	r2, r3, #29
 8009118:	d505      	bpl.n	8009126 <__sflush_r+0x46>
 800911a:	6863      	ldr	r3, [r4, #4]
 800911c:	1ac0      	subs	r0, r0, r3
 800911e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009120:	b10b      	cbz	r3, 8009126 <__sflush_r+0x46>
 8009122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009124:	1ac0      	subs	r0, r0, r3
 8009126:	2300      	movs	r3, #0
 8009128:	4602      	mov	r2, r0
 800912a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912c:	6a21      	ldr	r1, [r4, #32]
 800912e:	4628      	mov	r0, r5
 8009130:	47b0      	blx	r6
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	d106      	bne.n	8009146 <__sflush_r+0x66>
 8009138:	6829      	ldr	r1, [r5, #0]
 800913a:	291d      	cmp	r1, #29
 800913c:	d82c      	bhi.n	8009198 <__sflush_r+0xb8>
 800913e:	4a2a      	ldr	r2, [pc, #168]	; (80091e8 <__sflush_r+0x108>)
 8009140:	40ca      	lsrs	r2, r1
 8009142:	07d6      	lsls	r6, r2, #31
 8009144:	d528      	bpl.n	8009198 <__sflush_r+0xb8>
 8009146:	2200      	movs	r2, #0
 8009148:	6062      	str	r2, [r4, #4]
 800914a:	04d9      	lsls	r1, r3, #19
 800914c:	6922      	ldr	r2, [r4, #16]
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	d504      	bpl.n	800915c <__sflush_r+0x7c>
 8009152:	1c42      	adds	r2, r0, #1
 8009154:	d101      	bne.n	800915a <__sflush_r+0x7a>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	b903      	cbnz	r3, 800915c <__sflush_r+0x7c>
 800915a:	6560      	str	r0, [r4, #84]	; 0x54
 800915c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915e:	602f      	str	r7, [r5, #0]
 8009160:	2900      	cmp	r1, #0
 8009162:	d0ca      	beq.n	80090fa <__sflush_r+0x1a>
 8009164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009168:	4299      	cmp	r1, r3
 800916a:	d002      	beq.n	8009172 <__sflush_r+0x92>
 800916c:	4628      	mov	r0, r5
 800916e:	f000 f8fd 	bl	800936c <_free_r>
 8009172:	2000      	movs	r0, #0
 8009174:	6360      	str	r0, [r4, #52]	; 0x34
 8009176:	e7c1      	b.n	80090fc <__sflush_r+0x1c>
 8009178:	6a21      	ldr	r1, [r4, #32]
 800917a:	2301      	movs	r3, #1
 800917c:	4628      	mov	r0, r5
 800917e:	47b0      	blx	r6
 8009180:	1c41      	adds	r1, r0, #1
 8009182:	d1c7      	bne.n	8009114 <__sflush_r+0x34>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0c4      	beq.n	8009114 <__sflush_r+0x34>
 800918a:	2b1d      	cmp	r3, #29
 800918c:	d001      	beq.n	8009192 <__sflush_r+0xb2>
 800918e:	2b16      	cmp	r3, #22
 8009190:	d101      	bne.n	8009196 <__sflush_r+0xb6>
 8009192:	602f      	str	r7, [r5, #0]
 8009194:	e7b1      	b.n	80090fa <__sflush_r+0x1a>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e7ad      	b.n	80090fc <__sflush_r+0x1c>
 80091a0:	690f      	ldr	r7, [r1, #16]
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	d0a9      	beq.n	80090fa <__sflush_r+0x1a>
 80091a6:	0793      	lsls	r3, r2, #30
 80091a8:	680e      	ldr	r6, [r1, #0]
 80091aa:	bf08      	it	eq
 80091ac:	694b      	ldreq	r3, [r1, #20]
 80091ae:	600f      	str	r7, [r1, #0]
 80091b0:	bf18      	it	ne
 80091b2:	2300      	movne	r3, #0
 80091b4:	eba6 0807 	sub.w	r8, r6, r7
 80091b8:	608b      	str	r3, [r1, #8]
 80091ba:	f1b8 0f00 	cmp.w	r8, #0
 80091be:	dd9c      	ble.n	80090fa <__sflush_r+0x1a>
 80091c0:	6a21      	ldr	r1, [r4, #32]
 80091c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091c4:	4643      	mov	r3, r8
 80091c6:	463a      	mov	r2, r7
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b0      	blx	r6
 80091cc:	2800      	cmp	r0, #0
 80091ce:	dc06      	bgt.n	80091de <__sflush_r+0xfe>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	e78e      	b.n	80090fc <__sflush_r+0x1c>
 80091de:	4407      	add	r7, r0
 80091e0:	eba8 0800 	sub.w	r8, r8, r0
 80091e4:	e7e9      	b.n	80091ba <__sflush_r+0xda>
 80091e6:	bf00      	nop
 80091e8:	20400001 	.word	0x20400001

080091ec <_fflush_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	690b      	ldr	r3, [r1, #16]
 80091f0:	4605      	mov	r5, r0
 80091f2:	460c      	mov	r4, r1
 80091f4:	b913      	cbnz	r3, 80091fc <_fflush_r+0x10>
 80091f6:	2500      	movs	r5, #0
 80091f8:	4628      	mov	r0, r5
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	b118      	cbz	r0, 8009206 <_fflush_r+0x1a>
 80091fe:	6983      	ldr	r3, [r0, #24]
 8009200:	b90b      	cbnz	r3, 8009206 <_fflush_r+0x1a>
 8009202:	f7ff fa15 	bl	8008630 <__sinit>
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <_fflush_r+0x6c>)
 8009208:	429c      	cmp	r4, r3
 800920a:	d11b      	bne.n	8009244 <_fflush_r+0x58>
 800920c:	686c      	ldr	r4, [r5, #4]
 800920e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ef      	beq.n	80091f6 <_fflush_r+0xa>
 8009216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009218:	07d0      	lsls	r0, r2, #31
 800921a:	d404      	bmi.n	8009226 <_fflush_r+0x3a>
 800921c:	0599      	lsls	r1, r3, #22
 800921e:	d402      	bmi.n	8009226 <_fflush_r+0x3a>
 8009220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009222:	f7ff faa3 	bl	800876c <__retarget_lock_acquire_recursive>
 8009226:	4628      	mov	r0, r5
 8009228:	4621      	mov	r1, r4
 800922a:	f7ff ff59 	bl	80090e0 <__sflush_r>
 800922e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009230:	07da      	lsls	r2, r3, #31
 8009232:	4605      	mov	r5, r0
 8009234:	d4e0      	bmi.n	80091f8 <_fflush_r+0xc>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	059b      	lsls	r3, r3, #22
 800923a:	d4dd      	bmi.n	80091f8 <_fflush_r+0xc>
 800923c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800923e:	f7ff fa96 	bl	800876e <__retarget_lock_release_recursive>
 8009242:	e7d9      	b.n	80091f8 <_fflush_r+0xc>
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <_fflush_r+0x70>)
 8009246:	429c      	cmp	r4, r3
 8009248:	d101      	bne.n	800924e <_fflush_r+0x62>
 800924a:	68ac      	ldr	r4, [r5, #8]
 800924c:	e7df      	b.n	800920e <_fflush_r+0x22>
 800924e:	4b04      	ldr	r3, [pc, #16]	; (8009260 <_fflush_r+0x74>)
 8009250:	429c      	cmp	r4, r3
 8009252:	bf08      	it	eq
 8009254:	68ec      	ldreq	r4, [r5, #12]
 8009256:	e7da      	b.n	800920e <_fflush_r+0x22>
 8009258:	080095b4 	.word	0x080095b4
 800925c:	080095d4 	.word	0x080095d4
 8009260:	08009594 	.word	0x08009594

08009264 <_lseek_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	; (8009284 <_lseek_r+0x20>)
 8009268:	4604      	mov	r4, r0
 800926a:	4608      	mov	r0, r1
 800926c:	4611      	mov	r1, r2
 800926e:	2200      	movs	r2, #0
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f8 f892 	bl	800139c <_lseek>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_lseek_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_lseek_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	240002b8 	.word	0x240002b8

08009288 <__swhatbuf_r>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	460e      	mov	r6, r1
 800928c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009290:	2900      	cmp	r1, #0
 8009292:	b096      	sub	sp, #88	; 0x58
 8009294:	4614      	mov	r4, r2
 8009296:	461d      	mov	r5, r3
 8009298:	da08      	bge.n	80092ac <__swhatbuf_r+0x24>
 800929a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	602a      	str	r2, [r5, #0]
 80092a2:	061a      	lsls	r2, r3, #24
 80092a4:	d410      	bmi.n	80092c8 <__swhatbuf_r+0x40>
 80092a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092aa:	e00e      	b.n	80092ca <__swhatbuf_r+0x42>
 80092ac:	466a      	mov	r2, sp
 80092ae:	f000 f8bb 	bl	8009428 <_fstat_r>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	dbf1      	blt.n	800929a <__swhatbuf_r+0x12>
 80092b6:	9a01      	ldr	r2, [sp, #4]
 80092b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092c0:	425a      	negs	r2, r3
 80092c2:	415a      	adcs	r2, r3
 80092c4:	602a      	str	r2, [r5, #0]
 80092c6:	e7ee      	b.n	80092a6 <__swhatbuf_r+0x1e>
 80092c8:	2340      	movs	r3, #64	; 0x40
 80092ca:	2000      	movs	r0, #0
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	b016      	add	sp, #88	; 0x58
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092d4 <__smakebuf_r>:
 80092d4:	898b      	ldrh	r3, [r1, #12]
 80092d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092d8:	079d      	lsls	r5, r3, #30
 80092da:	4606      	mov	r6, r0
 80092dc:	460c      	mov	r4, r1
 80092de:	d507      	bpl.n	80092f0 <__smakebuf_r+0x1c>
 80092e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	2301      	movs	r3, #1
 80092ea:	6163      	str	r3, [r4, #20]
 80092ec:	b002      	add	sp, #8
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	ab01      	add	r3, sp, #4
 80092f2:	466a      	mov	r2, sp
 80092f4:	f7ff ffc8 	bl	8009288 <__swhatbuf_r>
 80092f8:	9900      	ldr	r1, [sp, #0]
 80092fa:	4605      	mov	r5, r0
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff fa57 	bl	80087b0 <_malloc_r>
 8009302:	b948      	cbnz	r0, 8009318 <__smakebuf_r+0x44>
 8009304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009308:	059a      	lsls	r2, r3, #22
 800930a:	d4ef      	bmi.n	80092ec <__smakebuf_r+0x18>
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	f043 0302 	orr.w	r3, r3, #2
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	e7e3      	b.n	80092e0 <__smakebuf_r+0xc>
 8009318:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <__smakebuf_r+0x7c>)
 800931a:	62b3      	str	r3, [r6, #40]	; 0x28
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	6020      	str	r0, [r4, #0]
 8009320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	9b00      	ldr	r3, [sp, #0]
 8009328:	6163      	str	r3, [r4, #20]
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	6120      	str	r0, [r4, #16]
 800932e:	b15b      	cbz	r3, 8009348 <__smakebuf_r+0x74>
 8009330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009334:	4630      	mov	r0, r6
 8009336:	f000 f889 	bl	800944c <_isatty_r>
 800933a:	b128      	cbz	r0, 8009348 <__smakebuf_r+0x74>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	89a0      	ldrh	r0, [r4, #12]
 800934a:	4305      	orrs	r5, r0
 800934c:	81a5      	strh	r5, [r4, #12]
 800934e:	e7cd      	b.n	80092ec <__smakebuf_r+0x18>
 8009350:	080085c9 	.word	0x080085c9

08009354 <__malloc_lock>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__malloc_lock+0x8>)
 8009356:	f7ff ba09 	b.w	800876c <__retarget_lock_acquire_recursive>
 800935a:	bf00      	nop
 800935c:	240002ac 	.word	0x240002ac

08009360 <__malloc_unlock>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__malloc_unlock+0x8>)
 8009362:	f7ff ba04 	b.w	800876e <__retarget_lock_release_recursive>
 8009366:	bf00      	nop
 8009368:	240002ac 	.word	0x240002ac

0800936c <_free_r>:
 800936c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800936e:	2900      	cmp	r1, #0
 8009370:	d044      	beq.n	80093fc <_free_r+0x90>
 8009372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009376:	9001      	str	r0, [sp, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f1a1 0404 	sub.w	r4, r1, #4
 800937e:	bfb8      	it	lt
 8009380:	18e4      	addlt	r4, r4, r3
 8009382:	f7ff ffe7 	bl	8009354 <__malloc_lock>
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <_free_r+0x94>)
 8009388:	9801      	ldr	r0, [sp, #4]
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	b933      	cbnz	r3, 800939c <_free_r+0x30>
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	b003      	add	sp, #12
 8009394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009398:	f7ff bfe2 	b.w	8009360 <__malloc_unlock>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d908      	bls.n	80093b2 <_free_r+0x46>
 80093a0:	6825      	ldr	r5, [r4, #0]
 80093a2:	1961      	adds	r1, r4, r5
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf01      	itttt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	1949      	addeq	r1, r1, r5
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	e7ed      	b.n	800938e <_free_r+0x22>
 80093b2:	461a      	mov	r2, r3
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b10b      	cbz	r3, 80093bc <_free_r+0x50>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d9fa      	bls.n	80093b2 <_free_r+0x46>
 80093bc:	6811      	ldr	r1, [r2, #0]
 80093be:	1855      	adds	r5, r2, r1
 80093c0:	42a5      	cmp	r5, r4
 80093c2:	d10b      	bne.n	80093dc <_free_r+0x70>
 80093c4:	6824      	ldr	r4, [r4, #0]
 80093c6:	4421      	add	r1, r4
 80093c8:	1854      	adds	r4, r2, r1
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	d1e0      	bne.n	8009392 <_free_r+0x26>
 80093d0:	681c      	ldr	r4, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	4421      	add	r1, r4
 80093d8:	6011      	str	r1, [r2, #0]
 80093da:	e7da      	b.n	8009392 <_free_r+0x26>
 80093dc:	d902      	bls.n	80093e4 <_free_r+0x78>
 80093de:	230c      	movs	r3, #12
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	e7d6      	b.n	8009392 <_free_r+0x26>
 80093e4:	6825      	ldr	r5, [r4, #0]
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf04      	itt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	bf04      	itt	eq
 80093f4:	1949      	addeq	r1, r1, r5
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6054      	str	r4, [r2, #4]
 80093fa:	e7ca      	b.n	8009392 <_free_r+0x26>
 80093fc:	b003      	add	sp, #12
 80093fe:	bd30      	pop	{r4, r5, pc}
 8009400:	240002b0 	.word	0x240002b0

08009404 <_read_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	; (8009424 <_read_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f7 ff62 	bl	80012dc <_read>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_read_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_read_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	240002b8 	.word	0x240002b8

08009428 <_fstat_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	; (8009448 <_fstat_r+0x20>)
 800942c:	2300      	movs	r3, #0
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	f7f7 ff96 	bl	8001366 <_fstat>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	d102      	bne.n	8009444 <_fstat_r+0x1c>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b103      	cbz	r3, 8009444 <_fstat_r+0x1c>
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	bf00      	nop
 8009448:	240002b8 	.word	0x240002b8

0800944c <_isatty_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d06      	ldr	r5, [pc, #24]	; (8009468 <_isatty_r+0x1c>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	f7f7 ff95 	bl	8001386 <_isatty>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_isatty_r+0x1a>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_isatty_r+0x1a>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	240002b8 	.word	0x240002b8

0800946c <_init>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr

08009478 <_fini>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr
